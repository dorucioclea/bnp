version: '3'
services:
  main:
    #restart: on-failure:5
    build: .
    image: opuscapita/bnp:dev
    depends_on:  # as of version 1.9.0 Dockerfile's HEALTHCHECK is not supported yet.
      - mysql
      - supplier
      - customer
      - consul
      - blob
      - email
    labels:
      SERVICE_NAME: 'bnp'
    environment:
      SERVICE_3008_NAME: bnp
      SERVICE_3000_CHECK_HTTP: /api/health/check
      SERVICE_3000_CHECK_INTERVAL: 15s
      SERVICE_3000_CHECK_TIMEOUT: 3s
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      MYSQL_DATABASE: $MYSQL_DATABASE
      REDIS_AUTH: $REDIS_AUTH
      NODE_ENV: development
    ports:
      - '3000:3000'

  onboarding:
    image: opuscapita/onboarding:dev
#    build: ../onboarding
#    volumes:
#      - .:/home/node/onboarding
    environment:
      APPLICATION_NAME: 'onboarding'
      NODE_ENV: $NODE_ENV
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      EXTERNAL_HOST: 52.174.28.41
      EXTERNAL_PORT: 8080
      REDIS_AUTH: ${REDIS_AUTH}
      HOST_IP: ${HOST_IP}
      SERVICE_3002_CHECK_HTTP: /api/health/check
      SERVICE_3002_CHECK_INTERVAL: 15s
      SERVICE_3002_CHECK_TIMEOUT: 3s
    depends_on:
      - redis
      - registrator
    labels:
      - 'SERVICE_NAME=onboarding'
      - 'SERVICE_TAGS=external,kong'
    extra_hosts:
      - 'consul:${HOST_IP}'
    ports:
      - '3002:3002'
    command: 'npm run dev'

  supplier:
    image: opuscapita/supplier:dev
#    build: ../supplier
#    volumes:
#     - ../supplier:/home/node/supplier
    depends_on:  # as of version 1.9.0 Dockerfile's HEALTHCHECK is not supported yet.
      - mysql
      - isodata
    labels:
      SERVICE_NAME: 'supplier'  # Service name used by Registrator for adding to Consul's service discovery registry.
      SERVICE_TAGS: 'external'
    ports:
      - "3001:3001"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      NODE_ENV: 'production'
      REDIS_AUTH: $REDIS_AUTH
      USER_NAME: 'svc_supplier'
      PASSWORD: 'test'
      CLIENT_KEY: $CLIENT_KEY
      CLIENT_SECRET: $CLIENT_SECRET
      SCOPE: $SCOPE
      SERVICE_3001_CHECK_HTTP: /api/health/check
      SERVICE_3001_CHECK_INTERVAL: 15s
      SERVICE_3001_CHECK_TIMEOUT: 3s
    command: 'npm run dev'

  customer:
    image: opuscapita/customer:dev
    depends_on:
      - mysql
      - consul
      - registrator
      - redis
    labels:
      SERVICE_NAME: 'customer'
    environment:
      SERVICE_3009_CHECK_HTTP: /api/health/check
      SERVICE_3009_CHECK_INTERVAL: 15s
      SERVICE_3009_CHECK_TIMEOUT: 3s
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      REDIS_AUTH: ${REDIS_AUTH}
    ports:
      - '3009:3009'
    command: 'npm run dev'

  blob:
    image: opuscapita/blob:dev
    depends_on:
     - mysql
     - consul
     - registrator
    labels:
      SERVICE_NAME: 'blob'
    extra_hosts:
     - 'consul:${HOST_IP}'
    environment:
      HOST_IP: ${HOST_IP}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      BLOB_KEY : ${BLOB_KEY}
      BLOB_ACCOUNT: ${BLOB_ACCOUNT}
      SERVICE_3012_CHECK_HTTP: /api/health/check
      SERVICE_3012_CHECK_INTERVAL: 15s
      SERVICE_3012_CHECK_TIMEOUT: 3s
    ports:
     - '3012:3012'
    command: "npm run dev"

  postgres:
    image: postgres:9.4
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: $POSTGRES_DB
      POSTGRES_DB: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    depends_on:
      - registrator

  user:
    image: opuscapita/user:local
#    build: ../user
#    volumes:
#     - ../user:/home/node/user
    depends_on:
      - mysql
      - consul
      - registrator
    labels:
      SERVICE_NAME: 'user'
    environment:
      MYSQL_DATABASE: $MYSQL_DATABASE
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      REDIS_AUTH: $REDIS_AUTH
      USER_NAME: 'svc_user'
      PASSWORD: 'test'
      CLIENT_KEY: $CLIENT_KEY
      CLIENT_SECRET: $CLIENT_SECRET
      SCOPE: $SCOPE
      SERVICE_3008_CHECK_HTTP: /api/health/check
      SERVICE_3008_CHECK_INTERVAL: 15s
      SERVICE_3008_CHECK_TIMEOUT: 3s
    ports:
      - '3008:3008'
    command: 'npm run dev'

  email:
    image: opuscapita/email:dev
    environment:
      NODE_ENV: 'production'
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      REDIS_AUTH: ${REDIS_AUTH}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      MAIL_API_KEY: ${MAIL_API_KEY}
      MAIL_API_SECRET: ${MAIL_API_SECRET}
      GATEWAY_SCHEME: ${GATEWAY_SCHEME}
      GATEWAY_IP: ${GATEWAY_IP}
      GATEWAY_PORT: ${GATEWAY_PORT}
      SERVICE_3050_CHECK_HTTP: /api/health/check
      SERVICE_3050_CHECK_INTERVAL: 15s
      SERVICE_3050_CHECK_TIMEOUT: 3s
    depends_on:
      - registrator
    ports:
      - '3050:3050' #uncomment in case you want to have access to kue UI
    command: 'npm run dev:production'

  kong:
    image: opuscapita/kong:dev
    environment:
      KONG_DATABASE: 'postgres'
      KONG_PG_HOST: $KONG_PG_HOST
      KONG_PG_PORT: $KONG_PG_PORT
      APP_HOST: $HOST_IP
      APP_HOST_PROTOCOL: $APP_HOST_PROTOCOL
      APP_HOST_PORT: $APP_HOST_PORT
      GATEWAY_SCHEME: $GATEWAY_SCHEME
      GATEWAY_IP: $GATEWAY_IP
      GATEWAY_PORT: $GATEWAY_PORT
      GATEWAY_CALLBACK: $GATEWAY_CALLBACK
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      LOG_PORT: 5000
      LOG_HOST: $LOG_HOST
      REDIS_HOST: $HOST_IP # TODO: remove after api-gw is using config
      REDIS_PORT: 6379 # TODO: remove after api-gw is using config
      REDIS_AUTH: $REDIS_AUTH # TODO: remove after api-gw is using config
      SERVICE_8001_NAME: 'kong'
      SERVICE_8080_NAME: 'kong-http'
    ports:
      - '8080:8080'
      - '8443:8443'
      - '8001:8001'
      - '7946:7946'
      - '7946:7946/udp'
    depends_on:
      - postgres
      - mysql
    volumes:
      - .:/usr/local/kong/logs

  auth:
    image: opuscapita/auth:dev
#    build: ../auth
#    volumes:
#     - ../auth:/home/node/auth
    ports:
     - '$APP_HOST_PORT:$APP_HOST_PORT'
    environment:
      NODE_ENV: $NODE_ENV
      APP_HOST: '0.0.0.0'
      APP_HOST_PROTOCOL: $APP_HOST_PROTOCOL
      APP_HOST_PORT: $APP_HOST_PORT
      GATEWAY_SCHEME: $GATEWAY_SCHEME
      GATEWAY_IP: $GATEWAY_IP
      GATEWAY_PORT: $GATEWAY_PORT
      GATEWAY_CALLBACK: $GATEWAY_CALLBACK
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      MYSQL_DATABASE: $MYSQL_DATABASE
      REDIS_AUTH: $REDIS_AUTH
      USER_NAME: 'svc_auth'
      PASSWORD: 'test'
      CLIENT_KEY: $CLIENT_KEY
      CLIENT_SECRET: $CLIENT_SECRET
      SCOPE: $SCOPE
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SERVICE_3005_CHECK_HTTP: /auth/certs
      SERVICE_3005_CHECK_INTERVAL: 15s
      SERVICE_3005_CHECK_TIMEOUT: 3s

    depends_on:
      - kong
    command: 'npm run dev'

  api-registry:
    image: opuscapita/api-registrator:dev
#    build: ../api-registrator
    ports:
      - '$API_REGISTRY_PORT:$API_REGISTRY_PORT'
    environment:
      AUTH_SERVER: $AUTH_SERVER
      AUTH_SERVER_PORT: $AUTH_SERVER_PORT
      API_REGISTRY_PORT: $API_REGISTRY_PORT
      GATEWAY_CALLBACK: $GATEWAY_CALLBACK
      SERVICE_3004_CHECK_HTTP: /api/health/check
      SERVICE_3004_CHECK_INTERVAL: 15s
      SERVICE_3004_CHECK_TIMEOUT: 3s
    depends_on:
      - kong

  redis:
    image: opuscapita/redis:dev
    ports:
      - '6379:6379'
    environment:
      REDIS_AUTH: $REDIS_AUTH
    depends_on:
      - registrator


  #ELK stack
#  elasticsearch:
#    image: ocbesbn/elasticsearch:latest
#    environment:
#      # This helps ES out with memory usage
#      - ES_JAVA_OPTS=-Xmx1g -Xms1g
#    depends_on:
#      - registrator
#    ports:
#      - '9200:9200'
#      - '9300:9300'
#
#  logstash:
#    image: ocbesbn/logstash:latest
#    depends_on:
#      - registrator
#    ports:
#      - '5000:5000/udp'
#      - '12201:12201/udp'
#    environment:
#      ELASTICSEARCH_IP: $HOST_IP
#
#  kibana:
#    image: ocbesbn/kibana:latest
#    depends_on:
#      - registrator
#    ports:
#      - '5601:5601'
#    environment:
#      ELASTICSEARCH_IP: $HOST_IP
  #ELK stack

  mysql:
    image: 'mysql:5.7'
    ports:
      - '3306:3306'
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    depends_on:
      - registrator

  isodata:
    image: opuscapita/isodata:dev
#    build: '../isodata'
#    volumes:
#      - ../isodata:/home/node/isodata
    ports:
      - '3006:3006'
    depends_on:
      - consul
      - mysql
    labels:
      SERVICE_NAME: isodata
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      PORT: '3006'
      SERVICE_3006_CHECK_HTTP: /api/health/check
      SERVICE_3006_CHECK_INTERVAL: 15s
      SERVICE_3006_CHECK_TIMEOUT: 3s
    command: 'npm run dev'

  einvoice-send:
    image: opuscapita/einvoice-send:dev
    ports:
      - '3007:3007'
    depends_on:
      - consul
      - mysql
    labels:
      SERVICE_NAME: einvoice-send
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      PORT: '3007'
      USER_NAME: 'svc_einvoice-send'
      PASSWORD: 'test'
      CLIENT_KEY: $CLIENT_KEY
      CLIENT_SECRET: $CLIENT_SECRET
      SCOPE: $SCOPE
      REDIS_AUTH: ${REDIS_AUTH}
      SERVICE_3007_CHECK_HTTP: /api/health/check
      SERVICE_3007_CHECK_INTERVAL: 15s
      SERVICE_3007_CHECK_TIMEOUT: 3s
    command: 'npm run dev'

  acl:
    image: opuscapita/acl:dev
    labels:
      - 'SERVICE_NAME=acl'
      - 'SERVICE_TAGS=external,kong'
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      SERVICE_3013_CHECK_HTTP: /api/health/check
      SERVICE_3013_CHECK_INTERVAL: 15s
      SERVICE_3013_CHECK_TIMEOUT: 3s
    ports:
     - '3013:3013'
    depends_on:
      - kong
    command: 'npm run dev'

  registrator:
    image: gliderlabs/registrator
    command: consul://consul:8500
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock
    depends_on:
      - consul

  consul:
    image: consul:latest
    ports:
      - '8400:8400'
      - '8500:8500'
      - '8600:53/udp'
    labels:
      SERVICE_IGNORE: 'true'  # Do not add any of Consul's services to Consul's service discovery registry.
    command: [agent, '-server', '-ui', '-bootstrap', '-client=0.0.0.0']
