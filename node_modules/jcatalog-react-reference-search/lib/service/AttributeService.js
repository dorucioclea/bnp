'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _superagentBluebirdPromise = require('superagent-bluebird-promise');

var _superagentBluebirdPromise2 = _interopRequireDefault(_superagentBluebirdPromise);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AttributeService = function () {
  function AttributeService(serviceUrl) {
    _classCallCheck(this, AttributeService);

    this._serviceUrl = serviceUrl + '/api';
  }

  _createClass(AttributeService, [{
    key: 'getAttributes',
    value: function getAttributes(attributeIds) {
      if (_lodash2.default.size(attributeIds) !== 0) {
        return _superagentBluebirdPromise2.default.get(this._serviceUrl + '/attributes?' + _lodash2.default.map(attributeIds, function (id) {
          return 'id=' + encodeURIComponent(id);
        }).join('&')).set('Accept', 'application/json');
      } else {
        return new _bluebird2.default(function (resolve, reject) {
          resolve({ body: [] });
        });
      }
    }
  }]);

  return AttributeService;
}();

exports.default = AttributeService;