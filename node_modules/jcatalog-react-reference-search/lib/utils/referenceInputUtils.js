'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadObjectData = exports.getTotalCount = undefined;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * If object doesn't have  object[labelPropery] -> returns object with [labelProperty] = object[keyProperty]
 *
 * @param object
 * @param keyProperty
 * @param labelProperty
 * @returns object
 * @private
 */
function _getObjectWithFallback(object, keyProperty, labelProperty) {
  if (_lodash2.default.hasIn(object, labelProperty)) {
    return object;
  } else if (_lodash2.default.hasIn(object, keyProperty)) {
    // in case when key property is defined then we overwrite label property value
    return _lodash2.default.assignIn({}, object, _defineProperty({}, labelProperty, object[keyProperty]));
  } else {
    return object;
  }
}

/**
 * If object has [labelProperty] -> object
 * else load object from enpoint
 * if result has [labelProperty] -> return result
 * else return fallback
 *
 * @param object
 * @param keyProperty
 * @param labelProperty
 * @param objectLoader
 * @returns {*}
 * @private
 */
function _loadSingleObject(object, keyProperty, labelProperty, objectLoader) {
  if (_lodash2.default.hasIn(object, labelProperty)) {
    // label exists -> return object as it is
    return _bluebird2.default.resolve(object);
  } else if (object[keyProperty] === undefined) {
    // key property is not specified -> return object as it is
    return _bluebird2.default.resolve(object);
  } else {
    return objectLoader(object[keyProperty]).then(function (response) {
      return _getObjectWithFallback(response.body, keyProperty, labelProperty);
    }).catch(function (error) {
      return _getObjectWithFallback(object, keyProperty, labelProperty);
    });
  }
}

/*
 * Loads object(s) from endpoint or falls back to object[labelProperty] -> object[keyProperty]
 *
 * @param object or array of objects
 * @param keyProperty unique identifier, f.e. supplierId
 * @param labelProperty object ui property name f.e. _objectLabel
 * @param objectLoader function that takes unique identifier as an argument and return Promise with loaded object
 * @param onLoadingStart function that handles loading start
 * @param onLoadingEnd function that handles loading end
 * @returns {*}
 */
function loadObjectData(object, keyProperty, labelProperty, objectLoader) {
  var onLoadingStart = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function () {};
  var onLoadingEnd = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : function () {};

  if (_lodash2.default.isNil(object)) {
    return _bluebird2.default.resolve(object);
  }
  // is multiple
  if (_lodash2.default.isArray(object)) {
    var someObjectHasNoLabel = _lodash2.default.some(object, function (item) {
      return !_lodash2.default.hasIn(item, labelProperty);
    });

    if (someObjectHasNoLabel) {
      onLoadingStart();
      return _bluebird2.default.all(_lodash2.default.map(object, function (item) {
        return _loadSingleObject(item, keyProperty, labelProperty, objectLoader);
      })).then(function (responses) {
        onLoadingEnd();
        return _lodash2.default.map(responses, function (response) {
          return _getObjectWithFallback(response, keyProperty, labelProperty);
        });
      });
    } else {
      return _bluebird2.default.resolve(object);
    }
  } else {
    onLoadingStart();
    return _loadSingleObject(object, keyProperty, labelProperty, objectLoader).then(function (result) {
      onLoadingEnd();
      return result;
    });
  }
}

/*
 * Parses Content-range header and returns response count
 */
function getTotalCount(response) {
  var range = response.headers['content-range'];
  var index = range.indexOf('/');
  var totalCount = range.substring(index + 1);
  return parseInt(totalCount, 10);
}

exports.getTotalCount = getTotalCount;
exports.loadObjectData = loadObjectData;