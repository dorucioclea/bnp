'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ClassificationBrowserDialog = require('../ClassificationBrowserDialog');

var _ClassificationBrowserDialog2 = _interopRequireDefault(_ClassificationBrowserDialog);

var _Button = require('react-bootstrap/lib/Button');

var _Button2 = _interopRequireDefault(_Button);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _ClassificationService = require('../../service/ClassificationService');

var _ClassificationService2 = _interopRequireDefault(_ClassificationService);

var _DomainCoreService = require('../../service/DomainCoreService');

var _DomainCoreService2 = _interopRequireDefault(_DomainCoreService);

var _AttributeService = require('../../service/AttributeService');

var _AttributeService2 = _interopRequireDefault(_AttributeService);

var _ReferenceInputBaseProps = require('../ReferenceInputBaseProps');

var _ReferenceInputBaseProps2 = _interopRequireDefault(_ReferenceInputBaseProps);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _ServiceRegistryValidator = require('../ServiceRegistryValidator');

var _ServiceRegistryValidator2 = _interopRequireDefault(_ServiceRegistryValidator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var CLASSIFICATION_SERVICE_NAME = 'classification';
var DOMAINCORE_SERVICE_NAME = 'domaincore';
var ATTRIBUTE_SERVICE_NAME = 'attribute';

var extractGroups = function extractGroups(props) {
  if (!props.value) {
    return [];
  }
  // if multiple, value is array, otherwise put it to array
  return props.multiple ? props.value : [props.value];
};

var ClassificationGroupInput = (_temp = _class = function (_React$Component) {
  _inherits(ClassificationGroupInput, _React$Component);

  function ClassificationGroupInput(props, context) {
    _classCallCheck(this, ClassificationGroupInput);

    var _this = _possibleConstructorReturn(this, (ClassificationGroupInput.__proto__ || Object.getPrototypeOf(ClassificationGroupInput)).call(this, props, context));

    _this.handleSearchButtonClick = function (e) {
      e.stopPropagation();

      _this.setState({ showClassificationBrowserDialog: true });
    };

    _this.handleRemoveButtonClick = function (e) {
      e.stopPropagation();

      var groups = [];
      _this.setState({ groups: groups });
      _this.props.onChange(groups);
    };

    _this.handleClassificationBrowserDialogOnSelect = function (groups) {
      _this.setState({ groups: groups, showClassificationBrowserDialog: false });
      _this.props.onChange(_this.props.multiple ? groups : groups[0]);
    };

    _this.classificationsLoader = function () {
      return _this.context.classificationService.getClassifications().then(function (response) {
        var classifications = [];
        (response.body || []).map(function (it) {
          // todo return child
          classifications.push({ id: it.classificationId, label: it._objectLabel, childCount: 1, _data: it });
        });

        return new _bluebird2.default(function (resolve, reject) {
          resolve(classifications);
        });
      }).catch(function (errors) {
        return new _bluebird2.default(function (resolve, reject) {
          resolve([]);
        });
      });
    };

    _this.classificationGroupsLoader = function (classification) {
      var searchParams = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      return _this.context.classificationService.getClassificationGroups(classification.id, searchParams).then(function (response) {
        var totalCount = Number(response.headers['content-range'].substring(response.headers['content-range'].lastIndexOf('/') + 1));
        var classificationGroups = [];
        (response.body || []).map(function (it) {
          // todo return child
          classificationGroups.push({
            id: it.classificationGroupId,
            label: it._objectLabel,
            childCount: it._childCount,
            _data: it
          });
        });
        return new _bluebird2.default(function (resolve, reject) {
          resolve({
            totalCount: totalCount,
            classificationGroups: classificationGroups
          });
        });
      }).catch(function (errors) {
        return new _bluebird2.default(function (resolve, reject) {
          resolve({
            totalCount: 0,
            classificationGroups: []
          });
        });
      });
    };

    _this.generateGroupsDisplayValue = function () {
      if (_lodash2.default.size(_this.state.groups) === 0) {
        return '';
      }
      return _this.state.groups.reduce(function (result, group) {
        var label = _lodash2.default.get(group, "_objectLabel", '');
        // if initial value return group label
        if (result === null) {
          return label;
        }
        return result + '; ' + label;
      }, null);
    };

    _this.state = { groups: [], showClassificationBrowserDialog: false };
    return _this;
  }

  _createClass(ClassificationGroupInput, [{
    key: 'getChildContext',
    value: function getChildContext() {
      var classificationServiceUrl = this.props.serviceRegistry(CLASSIFICATION_SERVICE_NAME).url;
      var domainCoreServiceUrl = this.props.serviceRegistry(DOMAINCORE_SERVICE_NAME).url;
      var attributeServiceUrl = this.props.serviceRegistry(ATTRIBUTE_SERVICE_NAME).url;

      this.context.classificationService = new _ClassificationService2.default(classificationServiceUrl);
      return _extends({}, this.context, {
        classificationService: this.context.classificationService,
        domainCoreService: new _DomainCoreService2.default(domainCoreServiceUrl),
        attributeService: new _AttributeService2.default(attributeServiceUrl)
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      // load descriptions for groups
      this.initializeGroups(this.props);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.value && nextProps.value !== this.props.value) {
        // load new groups
        this.initializeGroups(nextProps);
      }
    }
  }, {
    key: 'initializeGroups',


    /**
     * Load groups descriptions from server and store their to state. Method takes care about not to load already loaded
     * @param props actual props (if called from CompWillReceiveProps, nextProps should be passed)
     */
    value: function initializeGroups(props) {
      var _this2 = this;

      var groupsToUpdate = extractGroups(props);
      var promises = [];
      groupsToUpdate.map(function (group) {
        if (group._objectLabel === undefined) {
          var classificationId = _lodash2.default.get(group, "classification.classificationId", null);
          var classificationGroupId = _lodash2.default.get(group, 'classificationGroupId', null);
          if (classificationId === null || classificationGroupId === null) {
            promises.push(_bluebird2.default.resolve(group));
          } else {
            // we need to reload the group
            var p = _this2.context.classificationService.getClassificationGroup(group.classification.classificationId, group.classificationGroupId).then(function (response) {
              return response.body;
            }).catch(function (error) {
              return group;
            });
            promises.push(p);
          }
        }
      });
      if (promises.length > 0) {
        _bluebird2.default.all(promises).then(function (iterator) {
          var updatedGroups = iterator.map(function (group) {
            if (group._objectLabel === undefined) {
              if (group.classificationGroupId !== undefined) {
                return _lodash2.default.assign({}, group, { _objectLabel: group.classificationGroupId });
              }
            }
            return group;
          });
          _this2.setState({ groups: updatedGroups });
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(
        'div',
        { className: 'input-group jc-reference-search-input-classgrp' },
        _react2.default.createElement(_ClassificationBrowserDialog2.default, {
          show: this.state.showClassificationBrowserDialog,
          multiple: this.props.multiple,
          onlyLeafCouldBeSelected: this.props.onlyLeafCouldBeSelected,

          selectedClassification: this.props.selectedClassification,
          onClassificationGroupsUpdate: function onClassificationGroupsUpdate(groups) {
            _this3.setState({ groups: groups });
          },
          classificationsLoader: this.classificationsLoader,
          classificationGroupsLoader: this.classificationGroupsLoader,

          onSelect: this.handleClassificationBrowserDialogOnSelect,
          onCancel: function onCancel() {
            _this3.setState({ showClassificationBrowserDialog: false });
          }
        }),
        _react2.default.createElement('input', { onBlur: this.props.onBlur, onFocus: this.props.onFocus, id: this.props.id,
          name: this.props.name, className: 'form-control', value: this.generateGroupsDisplayValue(),
          readOnly: true, disabled: this.props.disabled
        }),
        _react2.default.createElement(
          'span',
          { className: 'input-group-btn' },
          _react2.default.createElement(
            _Button2.default,
            { onClick: this.handleSearchButtonClick, disabled: this.props.readOnly || this.props.disabled },
            _react2.default.createElement('span', { className: 'glyphicon glyphicon-search' })
          ),
          _react2.default.createElement(
            _Button2.default,
            { onClick: this.handleRemoveButtonClick, disabled: this.props.readOnly || this.props.disabled },
            _react2.default.createElement('span', { className: 'glyphicon glyphicon-remove' })
          )
        )
      );
    }
  }]);

  return ClassificationGroupInput;
}(_react2.default.Component), _class.propTypes = _extends({}, _ReferenceInputBaseProps2.default, {

  serviceRegistry: (0, _ServiceRegistryValidator2.default)([CLASSIFICATION_SERVICE_NAME, DOMAINCORE_SERVICE_NAME, ATTRIBUTE_SERVICE_NAME])
}), _class.contextTypes = {
  classificationService: _react2.default.PropTypes.object
}, _class.childContextTypes = {
  i18n: _react2.default.PropTypes.object,
  classificationService: _react2.default.PropTypes.object,
  domainCoreService: _react2.default.PropTypes.object,
  attributeService: _react2.default.PropTypes.object
}, _class.defaultProps = {
  value: null,
  onChange: function onChange() {},
  readOnly: false,
  disabled: false,

  selectedClassification: null,

  multiple: false,
  onlyLeafCouldBeSelected: false
}, _temp);
exports.default = ClassificationGroupInput;