'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Tabs = require('react-bootstrap/lib/Tabs');

var _Tabs2 = _interopRequireDefault(_Tabs);

var _Tab = require('react-bootstrap/lib/Tab');

var _Tab2 = _interopRequireDefault(_Tab);

var _ClassificationGroupSearchContainer = require('./ClassificationGroupSearchContainer/ClassificationGroupSearchContainer.react');

var _ClassificationGroupSearchContainer2 = _interopRequireDefault(_ClassificationGroupSearchContainer);

var _ClassificationGroupTreeContainer = require('./ClassificationGroupTreeContainer/ClassificationGroupTreeContainer.react');

var _ClassificationGroupTreeContainer2 = _interopRequireDefault(_ClassificationGroupTreeContainer);

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

require('./ClassificationBrowser.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var TREE_TAB = 1;
var SEARCH_TAB = 2;

var ClassificationBrowser = (_temp2 = _class = function (_React$Component) {
  _inherits(ClassificationBrowser, _React$Component);

  function ClassificationBrowser() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ClassificationBrowser);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ClassificationBrowser.__proto__ || Object.getPrototypeOf(ClassificationBrowser)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      activeTab: TREE_TAB,
      classificationGroupIDsForExpanding: null
    }, _this.handleTabChange = function (activeTab) {
      _this.setState({
        activeTab: activeTab,
        classificationGroupIDsForExpanding: null
      });
      _this.props.onClassificationGroupSelect(null);
    }, _this.handleExpandTree = function (classificationGroupIDsForExpanding) {
      if (classificationGroupIDsForExpanding) {
        _this.setState({
          classificationGroupIDsForExpanding: classificationGroupIDsForExpanding,
          activeTab: TREE_TAB
        });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ClassificationBrowser, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.context.i18n.register('classificationBrowserDialog', _i18n2.default);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.selectedClassification !== nextProps.selectedClassification) {
        this.setState({
          classificationGroupIDsForExpanding: null
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: 'tab-navigation flexfix--col-height' },
        _react2.default.createElement(
          _Tabs2.default,
          { defaultActiveKey: TREE_TAB, activeKey: this.state.activeTab, id: 'classification-tabs',
            onSelect: this.handleTabChange, bsStyle: 'tabs', className: 'flexfix--col-height'
          },
          _react2.default.createElement(
            _Tab2.default,
            { eventKey: TREE_TAB,
              title: this.context.i18n.getMessage('classificationBrowserDialog.tab.tree'),
              className: 'flexfix--col-height'
            },
            _react2.default.createElement(_ClassificationGroupTreeContainer2.default, {
              show: this.state.activeTab === TREE_TAB,
              selectedClassification: this.props.selectedClassification,
              expandingTree: this.state.classificationGroupIDsForExpanding,
              classificationGroupsLoader: this.props.classificationGroupsLoader,
              multiple: this.props.multiple,
              onlyLeafCouldBeSelected: this.props.onlyLeafCouldBeSelected,
              onClassificationGroupCheck: this.props.onClassificationGroupCheck,
              onClassificationGroupSelect: this.props.onClassificationGroupSelect
            })
          ),
          _react2.default.createElement(
            _Tab2.default,
            { eventKey: SEARCH_TAB,
              title: this.context.i18n.getMessage('classificationBrowserDialog.tab.search'),
              className: 'flexfix--col-height'
            },
            _react2.default.createElement(_ClassificationGroupSearchContainer2.default, {
              show: this.state.activeTab === SEARCH_TAB,
              selectedClassification: this.props.selectedClassification,
              classificationGroupsLoader: this.props.classificationGroupsLoader,
              multiple: this.props.multiple,
              onlyLeafCouldBeSelected: this.props.onlyLeafCouldBeSelected,
              onClassificationGroupCheck: this.props.onClassificationGroupCheck,
              onClassificationGroupSelect: this.props.onClassificationGroupSelect,
              onExpandTree: this.handleExpandTree
            })
          )
        )
      );
    }
  }]);

  return ClassificationBrowser;
}(_react2.default.Component), _class.propTypes = {
  selectedClassification: _react2.default.PropTypes.object,
  multiple: _react2.default.PropTypes.bool.isRequired,
  onlyLeafCouldBeSelected: _react2.default.PropTypes.bool.isRequired,

  classificationGroupsLoader: _react2.default.PropTypes.func.isRequired,
  onClassificationGroupCheck: _react2.default.PropTypes.func.isRequired,
  onClassificationGroupSelect: _react2.default.PropTypes.func.isRequired
}, _class.contextTypes = {
  i18n: _react2.default.PropTypes.object.isRequired
}, _temp2);
exports.default = ClassificationBrowser;