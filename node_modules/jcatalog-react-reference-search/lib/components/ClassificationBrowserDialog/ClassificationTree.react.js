'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

require('./ClassificationTree.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ClassificationTree = (_temp2 = _class = function (_React$Component) {
  _inherits(ClassificationTree, _React$Component);

  function ClassificationTree() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ClassificationTree);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ClassificationTree.__proto__ || Object.getPrototypeOf(ClassificationTree)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      selectedClassificationGroup: null, // set up if user click on group in tree
      checkedClassificationGroups: [], // user check/unchecks group -> this property is updated
      tree: null
    }, _this.buildNodesFromClassificationGroups = function (classificationGroups) {
      var children = classificationGroups.map(function (classificationGroup) {
        return {
          classificationGroup: classificationGroup,
          state: {
            checked: false,
            open: false,
            childrenLoaded: false
          },
          children: null
        };
      });
      children = children.sort(_this.classificationGroupComparator);
      return children;
    }, _this.loadChildren = function (classificationGroupIDsForExpanding, expandedLevel) {
      if (!classificationGroupIDsForExpanding || classificationGroupIDsForExpanding.length === expandedLevel) {
        return;
      }
      var siblingNodes = _this.state.tree.nodes;

      var _loop = function _loop(i) {
        siblingNodes = _lodash2.default.find(siblingNodes, function (node) {
          return node.classificationGroup.id === classificationGroupIDsForExpanding[i];
        }).children;
      };

      for (var i = 0; i < expandedLevel; i++) {
        _loop(i);
      }
      var node = _lodash2.default.find(siblingNodes, function (node) {
        return node.classificationGroup.id === classificationGroupIDsForExpanding[expandedLevel];
      });

      _this.handleNodeSelect(node);

      if (!node.state.childrenLoaded && expandedLevel !== classificationGroupIDsForExpanding.length - 1) {
        // prevent loading children nodes
        var classification = _this.props.selectedClassification;
        var parentClassificationGroupId = node.classificationGroup._data.classificationGroupId;
        _this.props.classificationGroupsLoader(classification, { parentClassificationGroupId: parentClassificationGroupId }).then(function (response) {
          var children = _this.buildNodesFromClassificationGroups(response.classificationGroups);
          var tree = _this.getTreeDeepCloneWithChanges(node, { state: { childrenLoaded: true, open: true }, children: children });
          _this.setState({ tree: tree }, function () {
            var nextExpandedLevel = expandedLevel;
            _this.loadChildren(classificationGroupIDsForExpanding, ++nextExpandedLevel);
          });
        });
      }
    }, _this.reloadTree = function (classification) {
      _this.props.classificationGroupsLoader(classification).then(function (response) {
        var classificationGroups = response.classificationGroups;
        var nodes = _this.buildNodesFromClassificationGroups(classificationGroups);
        _this.setState({ tree: { nodes: nodes } }, _this.loadChildren.bind(_this, _this.props.expandingTree, 0));
      });
    }, _this.loadTreeNodeChildren = function (node) {
      var classification = _this.props.selectedClassification;
      var parentClassificationGroupId = node.classificationGroup._data.classificationGroupId;
      _this.props.classificationGroupsLoader(classification, { parentClassificationGroupId: parentClassificationGroupId }).then(function (response) {
        var classificationGroups = response.classificationGroups;
        var children = _this.buildNodesFromClassificationGroups(classificationGroups);

        _this.changeNodeState(node, { children: children, state: { childrenLoaded: true } }, 'CHILDREN_LOADED_FOR_NODE');
      });
    }, _this.getTreeDeepCloneWithChanges = function (node, nodeChanges) {
      return _lodash2.default.cloneDeepWith(_this.state.tree, function (item) {
        if (!item) {
          return undefined;
        }
        var classificationGroup = item.classificationGroup;

        if (classificationGroup === undefined) {
          return undefined;
        }

        if (classificationGroup.id === node.classificationGroup.id) {
          var result = _lodash2.default.cloneDeep(item);
          result.state = _extends({}, result.state, nodeChanges.state);
          if (nodeChanges.children) {
            result.children = nodeChanges.children;
          }
          return result;
        }
        return undefined;
      });
    }, _this.changeNodeState = function (node, nodeChanges) {
      var eventName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'NONE';

      // toogle node.state.open boolean value in component state.tree for specified node
      var tree = _this.getTreeDeepCloneWithChanges(node, nodeChanges);
      _this.setState({ tree: tree }, _this.stateTreeEventPostProcessor.bind(_this, eventName, node));
    }, _this.stateTreeEventPostProcessor = function (eventName, node) {
      switch (eventName) {
        case 'OPEN_NODE':
          if (!node.state.childrenLoaded) {
            _this.loadTreeNodeChildren(node);
          }
          break;
        case 'CHECK_NODE':
          // old value
          var checkedClassificationGroups = _this.state.checkedClassificationGroups.slice(0);
          if (node.state.checked) {
            // now node is unchecked
            _lodash2.default.remove(checkedClassificationGroups, function (classificationGroup) {
              return classificationGroup.id === node.classificationGroup.id;
            });
            _this.setState({ checkedClassificationGroups: checkedClassificationGroups });
          } else {
            // now node is checked
            checkedClassificationGroups.push(node.classificationGroup);
            _this.setState({ checkedClassificationGroups: checkedClassificationGroups });
          }

          _this.props.onClassificationGroupCheck(checkedClassificationGroups);
          break;
        case 'CHILDREN_LOADED_FOR_NODE':
          break;
        default:
          break;
      }
    }, _this.handleNothing = function (e) {
      e.stopPropagation();
    }, _this.isNodeCouldBeSelected = function (node) {
      return !(_this.props.onlyLeafCouldBeSelected && node.classificationGroup.childCount > 0);
    }, _this.handleNodeSelect = function (node) {
      _this.setState({ selectedClassificationGroup: node.classificationGroup });
      _this.props.onClassificationGroupSelect(node.classificationGroup);
    }, _this.isClassificationGroupNode = function (classificationGroup, node) {
      if (!node || !classificationGroup) {
        return false;
      }
      return node.classificationGroup.id === classificationGroup.id;
    }, _this.renderTreeNode = function (node) {
      var treeLabelClass = "list-group-item classification-tree__label";
      if (_this.isClassificationGroupNode(_this.state.selectedClassificationGroup, node)) {
        treeLabelClass += ' classification-tree__label--current';
      }

      return _react2.default.createElement(
        'li',
        { key: node.classificationGroup.id },
        _react2.default.createElement(
          'ul',
          { className: 'classification-tree__list-group list-group' },
          _react2.default.createElement(
            'li',
            { className: treeLabelClass,
              onClick: function onClick(e) {
                _this.handleNodeSelect(node);
              }
            },
            function () {
              if (node.classificationGroup.childCount) {
                return _react2.default.createElement(
                  'div',
                  { className: 'classification-tree__collapse-outer',
                    onClick: function onClick(e) {
                      e.stopPropagation();
                      if (node.classificationGroup.childCount > 0) {
                        _this.changeNodeState(node, { state: { open: !node.state.open } }, 'OPEN_NODE');
                      }
                    },
                    onDoubleClick: _this.handleNothing
                  },
                  _react2.default.createElement('div', { className: 'classification-tree__svg-icon classification-tree__svg-icon--lg ' + (node.state.open ? 'classification-tree__svg-icon--arrow-down' : 'classification-tree__svg-icon--arrow-right')
                  })
                );
              } else {
                return null;
              }
            }(),
            _this.props.multiple ? _react2.default.createElement(
              'div',
              { className: 'classification-tree__multi-select-outer',
                onClick: function onClick(e) {
                  e.stopPropagation();
                  if (_this.isNodeCouldBeSelected(node)) {
                    _this.changeNodeState(node, { state: { checked: !node.state.checked } }, 'CHECK_NODE');
                  }
                },
                onDoubleClick: _this.handleNothing
              },
              _react2.default.createElement(
                'div',
                { className: 'classification-tree__multi-select ' + (_this.isNodeCouldBeSelected(node) ? '' : 'classification-tree__multi-select--disabled')
                },
                node.state.checked ? _react2.default.createElement('i', { className: 'glyphicon glyphicon-ok classification-tree__multi-select-checked-icon' }) : null
              )
            ) : null,
            node.classificationGroup.childCount ? _react2.default.createElement(
              'strong',
              { className: 'classification-tree__label-text' },
              node.classificationGroup.label
            ) : _react2.default.createElement(
              'span',
              { className: 'classification-tree__label-text' },
              node.classificationGroup.label
            ),
            _react2.default.createElement(
              'div',
              { className: 'classification-tree__child-count-outer' },
              _react2.default.createElement(
                'span',
                { className: 'classification-tree__child-count badge' },
                node.classificationGroup.childCount > 0 ? node.classificationGroup.childCount : ''
              )
            )
          ),
          node.classificationGroup.childCount > 0 && node.state.open && node.state.childrenLoaded && _lodash2.default.size(node.children) > 0 ? _react2.default.createElement(
            'li',
            null,
            _react2.default.createElement(
              'ul',
              { className: 'classification-tree__list-group list-group' },
              node.children.map(function (node) {
                return _this.renderTreeNode(node);
              })
            )
          ) : null
        )
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ClassificationTree, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var selectedClassification = this.state.selectedClassification;
      if (!selectedClassification) {
        selectedClassification = this.props.selectedClassification;
      }
      if (selectedClassification) {
        this.reloadTree(selectedClassification);
      }
      _bluebird2.default.resolve().then(function () {
        _this2.setState({ selectedClassification: selectedClassification });
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.selectedClassification !== nextProps.selectedClassification || this.props.expandingTree !== nextProps.expandingTree) {
        this.reloadTree(nextProps.selectedClassification);
      }
    }
  }, {
    key: 'classificationGroupComparator',
    value: function classificationGroupComparator(node1, node2) {
      var orderNoComparator = function orderNoComparator(node1, node2) {
        if (!_lodash2.default.isUndefined(node1.classificationGroup._data.orderNo) && !_lodash2.default.isUndefined(node2.classificationGroup._data.orderNo)) {
          return _lodash2.default.toInteger(node1.classificationGroup._data.orderNo) - _lodash2.default.toInteger(node2.classificationGroup._data.orderNo);
        } else if (_lodash2.default.isUndefined(node1.classificationGroup._data.orderNo) && _lodash2.default.isUndefined(node2.classificationGroup._data.orderNo)) {
          return 0;
        } else if (_lodash2.default.isUndefined(node1.classificationGroup._data.orderNo)) {
          return 1;
        } else if (_lodash2.default.isUndefined(node2.classificationGroup._data.orderNo)) {
          return -1;
        } else {
          return 0;
        }
      };

      var objectLabelComparator = function objectLabelComparator(node1, node2) {
        if (!_lodash2.default.isEmpty(node1.classificationGroup.label) && !_lodash2.default.isEmpty(node2.classificationGroup.label)) {
          return _lodash2.default.toLower(node1.classificationGroup.label).localeCompare(_lodash2.default.toLower(node2.classificationGroup.label));
        } else if (_lodash2.default.isEmpty(node1.classificationGroup.label) && _lodash2.default.isEmpty(node2.classificationGroup.label)) {
          return 0;
        } else if (_lodash2.default.isEmpty(node1.classificationGroup.label)) {
          return -1;
        } else if (_lodash2.default.isEmpty(node2.classificationGroup.label)) {
          return 1;
        } else {
          return 0;
        }
      };

      var comparisonResult = orderNoComparator(node1, node2);
      if (comparisonResult === 0) {
        comparisonResult = objectLabelComparator(node1, node2);
      }

      return comparisonResult;
    }

    // could be placed out if component class

  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(
        'div',
        { className: 'classification-browser__col-left flexfix--col-height' },
        _react2.default.createElement(
          'div',
          { className: 'form-horizontal clearfix flexfix--col-height' },
          _react2.default.createElement(
            'form',
            { className: 'clearfix flexfix--col-height' },
            _react2.default.createElement(
              'div',
              { className: 'clearfix flexfix--col-height' },
              _react2.default.createElement(
                'div',
                { className: 'col-xs-12 flexfix--col-height' },
                _react2.default.createElement(
                  'div',
                  { className: 'row flexfix--col-height' },
                  !this.state.tree || !this.state.tree.nodes ? null : _react2.default.createElement(
                    'div',
                    { className: 'classification-tree flexfix--col-height' },
                    _react2.default.createElement(
                      'ul',
                      { className: 'classification-tree__container' },
                      this.state.tree.nodes.map(function (node) {
                        return _this3.renderTreeNode(node);
                      })
                    )
                  )
                )
              )
            )
          )
        )
      );
    }
  }]);

  return ClassificationTree;
}(_react2.default.Component), _class.propTypes = {
  // onSelect: React.PropTypes.func,
  // onCancel: React.PropTypes.func,
  selectedClassification: _react2.default.PropTypes.object,
  expandingTree: _react2.default.PropTypes.array,
  classificationGroupsLoader: _react2.default.PropTypes.func.isRequired,
  multiple: _react2.default.PropTypes.bool,
  onlyLeafCouldBeSelected: _react2.default.PropTypes.bool,
  onClassificationGroupCheck: _react2.default.PropTypes.func,
  onClassificationGroupSelect: _react2.default.PropTypes.func
}, _class.defaultProps = {
  // function, 2 args: classification, group (optional),
  // returns array of objects with 'id' and 'lebel' propertis (at least)
  classificationGroupsLoader: null,
  multiple: false,
  // defines that only leaf node could be selected (e.g. only leaf group could be send back to onSelect callback)
  onlyLeafCouldBeSelected: false,
  // works/called only iff multiple == true
  onClassificationGroupCheck: function onClassificationGroupCheck() {},
  // works/called only iff multiple == false
  // select when: 1) user selected item, 2) or selected null if user choose classification
  onClassificationGroupSelect: function onClassificationGroupSelect() {}
}, _temp2);
exports.default = ClassificationTree;