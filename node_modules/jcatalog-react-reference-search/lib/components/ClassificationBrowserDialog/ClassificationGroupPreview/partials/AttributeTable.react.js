'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var AttributeTable = (_temp = _class = function (_React$Component) {
  _inherits(AttributeTable, _React$Component);

  function AttributeTable() {
    _classCallCheck(this, AttributeTable);

    return _possibleConstructorReturn(this, (AttributeTable.__proto__ || Object.getPrototypeOf(AttributeTable)).apply(this, arguments));
  }

  _createClass(AttributeTable, [{
    key: 'render',
    value: function render() {
      if (_lodash2.default.size(this.props.attributes) === 0) {
        return _react2.default.createElement(
          'div',
          { style: { margin: 5 } },
          _react2.default.createElement(
            'span',
            null,
            this.context.i18n.getMessage('classificationGroupPreview.noAttributesMessage')
          )
        );
      }

      return _react2.default.createElement(
        'table',
        { cellSpacing: '0', className: 'table' },
        _react2.default.createElement(
          'thead',
          null,
          _react2.default.createElement(
            'tr',
            null,
            _react2.default.createElement(
              'th',
              null,
              this.context.i18n.getMessage('classificationGroupPreview.attributeLabel')
            ),
            _react2.default.createElement(
              'th',
              null,
              this.context.i18n.getMessage('classificationGroupPreview.attributeTypeLabel')
            )
          )
        ),
        _react2.default.createElement(
          'tbody',
          null,
          this.props.attributes.map(function (attribute, idx) {
            return _react2.default.createElement(
              'tr',
              { key: idx },
              _react2.default.createElement(
                'td',
                null,
                attribute._objectLabel
              ),
              _react2.default.createElement(
                'td',
                null,
                attribute.type.name
              )
            );
          })
        )
      );
    }
  }]);

  return AttributeTable;
}(_react2.default.Component), _class.propTypes = {
  attributes: _react2.default.PropTypes.array.isRequired
}, _class.contextTypes = {
  i18n: _react2.default.PropTypes.object.isRequired
}, _temp);
exports.default = AttributeTable;