'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _Button = require('react-bootstrap/lib/Button');

var _Button2 = _interopRequireDefault(_Button);

var _Modal = require('react-bootstrap/lib/Modal');

var _Modal2 = _interopRequireDefault(_Modal);

var _Dropdown = require('react-bootstrap/lib/Dropdown');

var _Dropdown2 = _interopRequireDefault(_Dropdown);

var _MenuItem = require('react-bootstrap/lib/MenuItem');

var _MenuItem2 = _interopRequireDefault(_MenuItem);

var _ClassificationBrowser = require('./ClassificationBrowser.react');

var _ClassificationBrowser2 = _interopRequireDefault(_ClassificationBrowser);

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

require('./ClassificationBrowserDialog.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ClassificationBrowserDialog = (_temp = _class = function (_React$Component) {
  _inherits(ClassificationBrowserDialog, _React$Component);

  function ClassificationBrowserDialog(props, context) {
    _classCallCheck(this, ClassificationBrowserDialog);

    var _this = _possibleConstructorReturn(this, (ClassificationBrowserDialog.__proto__ || Object.getPrototypeOf(ClassificationBrowserDialog)).call(this, props, context));

    _this.state = {
      classifications: null,
      selectedClassification: null,
      selectedClassificationGroups: null,
      selectButtonIsDisabled: true
    };

    _this.setCurrentClassification = function (classification, classifications) {
      var selectedClassification = classification;
      if (!selectedClassification) {
        selectedClassification = _lodash2.default.first(classifications);
      } else {
        // update selected classification using loaded information as initial one could contain only 'id'
        selectedClassification = _lodash2.default.find(classifications, { _data: { classificationId: selectedClassification.classificationId } });
      }
      if (!selectedClassification && classification) {
        selectedClassification = {
          id: classification.classificationId,
          label: classification.classificationId
        };
      }
      _this.setState({
        selectedClassification: selectedClassification
      });
    };

    _this.handleClassificationGroupCheck = function (selectedGroups) {
      var selectButtonIsDisabled = true;
      var selectedClassificationGroups = null;
      if (selectedGroups && selectedGroups.length && _this.props.multiple) {
        selectedClassificationGroups = _lodash2.default.map(selectedGroups, '_data');
        selectButtonIsDisabled = false;
      }
      _this.setState({
        selectButtonIsDisabled: selectButtonIsDisabled,
        selectedClassificationGroups: selectedClassificationGroups
      });
    };

    _this.handleClassificationGroupSelect = function (selectedClassificationGroup) {
      var selectButtonIsDisabled = true;
      var selectedClassificationGroups = null;
      if (selectedClassificationGroup && !_this.props.multiple) {
        selectedClassificationGroups = _lodash2.default.map([selectedClassificationGroup], '_data');
        selectButtonIsDisabled = false;
      }
      _this.setState({
        selectButtonIsDisabled: selectButtonIsDisabled,
        selectedClassificationGroups: selectedClassificationGroups
      });
    };

    _this.handleCancelClick = function (e) {
      if (e) {
        e.stopPropagation();
      }
      _this.props.onCancel();
    };

    _this.handleSelectClick = function (e) {
      e.stopPropagation();
      _this.props.onSelect(_this.state.selectedClassificationGroups);
    };

    _this.handleSelectClassification = function (selectedClassification) {
      _this.setState({
        selectedClassification: selectedClassification
      }, _this.props.onClassificationGroupsUpdate.bind(_this, []));
    };

    return _this;
  }

  _createClass(ClassificationBrowserDialog, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.context.i18n.register('ClassificationBrowserDialog', _i18n2.default);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      this.props.classificationsLoader().then(function (classifications) {
        _this2.setCurrentClassification(_this2.props.selectedClassification, classifications);
        _this2.setState({ classifications: classifications });
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.selectedClassification !== this.props.selectedClassification || nextProps.show !== this.props.show) {
        this.setCurrentClassification(nextProps.selectedClassification, this.state.classifications);
      }
      if (this.props.show !== nextProps.show) {
        this.setState({
          selectButtonIsDisabled: true,
          selectedClassificationGroups: null
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var i18n = this.context.i18n;

      var selectButtonIsDisabled = true;
      if (!this.state.selectButtonIsDisabled && this.state.selectedClassificationGroups) {
        selectButtonIsDisabled = false;
      }
      return _react2.default.createElement(
        _Modal2.default,
        { show: this.props.show,
          dialogClassName: 'classification-browser-dialog__modal-fullscreen',
          onHide: this.handleCancelClick
        },
        _react2.default.createElement(
          _Modal2.default.Header,
          { closeButton: true },
          _react2.default.createElement(
            _Modal2.default.Title,
            null,
            _react2.default.createElement(
              'div',
              null,
              _react2.default.createElement(
                'span',
                null,
                i18n.getMessage('classificationBrowserDialog.title')
              ),
              function () {
                if (_this3.state.classifications) {
                  if (!_lodash2.default.isNil(_this3.props.selectedClassification)) {
                    return _react2.default.createElement(
                      'strong',
                      { className: 'classification-name' },
                      _this3.state.selectedClassification.label
                    );
                  } else {
                    return _react2.default.createElement(
                      _Dropdown2.default,
                      { id: 'classification-dropdown',
                        disabled: !_lodash2.default.isNil(_this3.props.selectedClassification),
                        onSelect: function onSelect(e, classification) {
                          _this3.handleSelectClassification(classification);
                        }
                      },
                      _react2.default.createElement(
                        _Dropdown2.default.Toggle,
                        { bsStyle: 'link' },
                        _react2.default.createElement(
                          'strong',
                          null,
                          _this3.state.selectedClassification.label
                        )
                      ),
                      _react2.default.createElement(
                        _Dropdown2.default.Menu,
                        null,
                        _this3.state.classifications.filter(function (classification) {
                          return classification.id !== _this3.state.selectedClassification;
                        }).map(function (classification) {
                          return _react2.default.createElement(
                            _MenuItem2.default,
                            { key: classification.id, eventKey: classification },
                            classification.label
                          );
                        })
                      )
                    );
                  }
                } else {
                  return _react2.default.createElement(
                    'p',
                    null,
                    'no groups'
                  );
                }
              }()
            )
          )
        ),
        _react2.default.createElement(
          _Modal2.default.Body,
          null,
          _react2.default.createElement(_ClassificationBrowser2.default, {
            selectedClassification: this.state.selectedClassification,
            classificationGroupsLoader: this.props.classificationGroupsLoader,
            multiple: this.props.multiple,
            onlyLeafCouldBeSelected: this.props.onlyLeafCouldBeSelected,
            onClassificationGroupCheck: this.handleClassificationGroupCheck,
            onClassificationGroupSelect: this.handleClassificationGroupSelect
          })
        ),
        _react2.default.createElement(
          _Modal2.default.Footer,
          null,
          _react2.default.createElement(
            _Button2.default,
            { bsStyle: 'link', onClick: this.handleCancelClick },
            i18n.getMessage('classificationBrowserDialog.button.cancel')
          ),
          _react2.default.createElement(
            _Button2.default,
            { bsStyle: 'primary',
              onClick: this.handleSelectClick,
              disabled: selectButtonIsDisabled
            },
            i18n.getMessage('classificationBrowserDialog.button.select')
          )
        )
      );
    }
  }]);

  return ClassificationBrowserDialog;
}(_react2.default.Component), _class.propTypes = {
  show: _react2.default.PropTypes.bool,
  onSelect: _react2.default.PropTypes.func,
  onCancel: _react2.default.PropTypes.func,
  onClassificationGroupsUpdate: _react2.default.PropTypes.func,
  // these properties are passed to the browser
  selectedClassification: _react2.default.PropTypes.object,
  classificationsLoader: _react2.default.PropTypes.func.isRequired,
  classificationGroupsLoader: _react2.default.PropTypes.func.isRequired,
  multiple: _react2.default.PropTypes.bool,
  onlyLeafCouldBeSelected: _react2.default.PropTypes.bool
}, _class.contextTypes = {
  i18n: _react2.default.PropTypes.object.isRequired
}, _class.defaultProps = {
  show: false,
  onSelect: _lodash2.default.noop,
  onCancel: _lodash2.default.noop
}, _temp);
exports.default = ClassificationBrowserDialog;