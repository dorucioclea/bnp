'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactSplitPane = require('react-split-pane');

var _reactSplitPane2 = _interopRequireDefault(_reactSplitPane);

var _Input = require('react-bootstrap/lib/Input');

var _Input2 = _interopRequireDefault(_Input);

var _ButtonToolbar = require('react-bootstrap/lib/ButtonToolbar');

var _ButtonToolbar2 = _interopRequireDefault(_ButtonToolbar);

var _Button = require('react-bootstrap/lib/Button');

var _Button2 = _interopRequireDefault(_Button);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _ClassificationGroupPreview = require('../ClassificationGroupPreview/ClassificationGroupPreview.react');

var _ClassificationGroupPreview2 = _interopRequireDefault(_ClassificationGroupPreview);

var _ClassificationGroupSearchResult = require('../ClassificationGroupSearchResult/ClassificationGroupSearchResult.react');

var _ClassificationGroupSearchResult2 = _interopRequireDefault(_ClassificationGroupSearchResult);

require('../ClassificationBrowser.less');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ASC_ORDER = 'asc';
var INITIAL_SEARCH_PARAMS = {
  classificationGroupId: '',
  _descShort: '',
  _attributeId: ''
};
var INITIAL_SEARCH_PARAMS_OPERATORS = {
  classificationGroupId_operator: 'startsWith',
  _descShort_operator: 'startsWith',
  _attributeId_operator: 'startsWith'
};
var INITIAL_SEARCH_RESULT_ATTRIBUTES = {
  order: ASC_ORDER,
  sort: 'classificationGroupId',
  offset: 0
};

var ClassificationGroupSearchContainer = (_temp2 = _class = function (_React$Component) {
  _inherits(ClassificationGroupSearchContainer, _React$Component);

  function ClassificationGroupSearchContainer() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ClassificationGroupSearchContainer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ClassificationGroupSearchContainer.__proto__ || Object.getPrototypeOf(ClassificationGroupSearchContainer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      searchParams: _extends({}, INITIAL_SEARCH_PARAMS),
      searchResultAttributes: _extends({}, INITIAL_SEARCH_RESULT_ATTRIBUTES),
      classificationGroups: [],
      classificationGroupsTotalCount: 0,
      previewClassificationGroup: null
    }, _this.isClassificationGroupCouldBeSelected = function (classificationGroup) {
      return !(_this.props.onlyLeafCouldBeSelected && classificationGroup.childCount > 0);
    }, _this.onSearchClassificationGroup = function (searchParams) {
      _this.props.classificationGroupsLoader(_this.props.selectedClassification, _extends({}, INITIAL_SEARCH_RESULT_ATTRIBUTES, searchParams, INITIAL_SEARCH_PARAMS_OPERATORS)).then(function (response) {
        if (!_lodash2.default.isEqual(_this.state.classificationGroups, response.classificationGroups)) {
          _this.setState({
            previewClassificationGroup: null
          });
        }
        _this.setState({
          classificationGroups: response.classificationGroups,
          classificationGroupsTotalCount: response.totalCount,
          searchResultAttributes: _extends({}, INITIAL_SEARCH_RESULT_ATTRIBUTES)
        });
      });
    }, _this.handleOnSearchParamChange = function (paramName, paramValue) {
      var state = {
        searchParams: _extends({}, _this.state.searchParams)
      };
      state.searchParams[paramName] = paramValue;
      _this.setState(state);
    }, _this.handleOnResetClick = function () {
      _this.setState({
        searchParams: _extends({}, INITIAL_SEARCH_PARAMS)
      });
    }, _this.handleOnUpdateSearchResult = function (searchResultAttributes) {
      _this.setState({
        searchResultAttributes: searchResultAttributes
      });
      _this.props.classificationGroupsLoader(_this.props.selectedClassification, _extends({}, _this.state.searchParams, INITIAL_SEARCH_PARAMS_OPERATORS, searchResultAttributes)).then(function (response) {
        _this.setState({
          classificationGroups: response.classificationGroups,
          classificationGroupsTotalCount: response.totalCount,
          previewClassificationGroup: null
        });
      });
    }, _this.handleSubmitForm = function (e) {
      e.preventDefault();
      _this.onSearchClassificationGroup(_this.state.searchParams);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ClassificationGroupSearchContainer, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.context.i18n.register('ClassificationGroupSearchContainer', _i18n2.default);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (this.props.selectedClassification) {
        var params = _extends({}, this.state.searchParams, this.state.searchResultAttributes, INITIAL_SEARCH_PARAMS_OPERATORS);
        this.props.classificationGroupsLoader(this.props.selectedClassification, params).then(function (response) {
          _this2.setState({
            classificationGroups: response.classificationGroups,
            classificationGroupsTotalCount: response.totalCount,
            previewClassificationGroup: null,
            searchResultAttributes: _extends({}, INITIAL_SEARCH_RESULT_ATTRIBUTES)
          });
        });
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this3 = this;

      if (this.props.selectedClassification !== nextProps.selectedClassification) {
        this.props.classificationGroupsLoader(nextProps.selectedClassification, _extends({}, INITIAL_SEARCH_PARAMS, INITIAL_SEARCH_RESULT_ATTRIBUTES, INITIAL_SEARCH_PARAMS_OPERATORS)).then(function (response) {
          _this3.setState({
            classificationGroups: response.classificationGroups,
            classificationGroupsTotalCount: response.totalCount,
            previewClassificationGroup: null,
            searchParams: _extends({}, INITIAL_SEARCH_PARAMS),
            searchResultAttributes: _extends({}, INITIAL_SEARCH_RESULT_ATTRIBUTES)
          });
        });
      }
      if (this.props.show !== nextProps.show) {
        this.setState({
          previewClassificationGroup: null
        });
      }
    }
  }, {
    key: 'onClassificationGroupSelectWrapper',
    value: function onClassificationGroupSelectWrapper(selectedClassificationGroup) {
      if (!selectedClassificationGroup) {
        this.setState({ previewClassificationGroup: null });
      } else {
        this.setState({ previewClassificationGroup: selectedClassificationGroup._data });
        if (this.isClassificationGroupCouldBeSelected(selectedClassificationGroup)) {
          this.props.onClassificationGroupSelect(selectedClassificationGroup);
        } else {
          this.props.onClassificationGroupSelect(null);
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      if (!this.props.show) {
        return null;
      }
      return _react2.default.createElement(
        'div',
        { className: 'flexfix--col-height' },
        _react2.default.createElement(
          'div',
          { className: 'classification-browser__search-form' },
          _react2.default.createElement(
            'form',
            { onSubmit: this.handleSubmitForm },
            _react2.default.createElement(
              'div',
              { className: 'row' },
              _react2.default.createElement(
                'div',
                { className: 'col-sm-4' },
                _react2.default.createElement(
                  'div',
                  { className: 'form-group' },
                  _react2.default.createElement(
                    'label',
                    { htmlFor: 'groupIdInput' },
                    this.context.i18n.getMessage('ClassificationGroupSearchContainer.label.classificationGroupId')
                  ),
                  _react2.default.createElement(_Input2.default, { id: 'groupIdInput', type: 'text', className: 'form-control',
                    onChange: function onChange(e) {
                      _this4.handleOnSearchParamChange('classificationGroupId', e.target.value);
                    },
                    value: this.state.searchParams.classificationGroupId
                  })
                )
              ),
              _react2.default.createElement(
                'div',
                { className: 'col-sm-4' },
                _react2.default.createElement(
                  'div',
                  { className: 'form-group' },
                  _react2.default.createElement(
                    'label',
                    { htmlFor: 'groupDescInput' },
                    this.context.i18n.getMessage('ClassificationGroupSearchContainer.label.classificationDescription')
                  ),
                  _react2.default.createElement(_Input2.default, { id: 'groupDescInput', type: 'text', className: 'form-control',
                    onChange: function onChange(e) {
                      _this4.handleOnSearchParamChange('_descShort', e.target.value);
                    },
                    value: this.state.searchParams._descShort
                  })
                )
              ),
              _react2.default.createElement(
                'div',
                { className: 'col-sm-4' },
                _react2.default.createElement(
                  'div',
                  { className: 'form-group text-justify' },
                  _react2.default.createElement(
                    'label',
                    { htmlFor: 'attributeIdInput' },
                    this.context.i18n.getMessage('ClassificationGroupSearchContainer.label.attributeId')
                  ),
                  _react2.default.createElement(_Input2.default, { id: 'attributeIdInput', type: 'text', className: 'form-control',
                    onChange: function onChange(e) {
                      _this4.handleOnSearchParamChange('_attributeId', e.target.value);
                    },
                    value: this.state.searchParams._attributeId
                  })
                )
              )
            ),
            _react2.default.createElement(
              'div',
              { className: 'form-submit text-right' },
              _react2.default.createElement(
                _ButtonToolbar2.default,
                null,
                _react2.default.createElement(
                  _Button2.default,
                  { className: 'btn btn-link', onClick: this.handleOnResetClick },
                  this.context.i18n.getMessage('ClassificationGroupSearchContainer.button.reset')
                ),
                _react2.default.createElement(
                  _Button2.default,
                  { type: 'submit', bsStyle: 'primary' },
                  this.context.i18n.getMessage('ClassificationGroupSearchContainer.button.search')
                )
              )
            )
          )
        ),
        _react2.default.createElement(
          'div',
          { className: 'flexfix--col-height' },
          _react2.default.createElement(
            _reactSplitPane2.default,
            { split: 'vertical',
              minSize: 350,
              defaultSize: 500,
              className: 'classification-browser__split-pane block-relative flexfix--col-height'
            },
            _react2.default.createElement(_ClassificationGroupSearchResult2.default, {
              classificationGroups: this.state.classificationGroups,
              onlyLeafCouldBeSelected: this.props.onlyLeafCouldBeSelected,
              multiple: this.props.multiple,
              onClassificationGroupSelect: this.onClassificationGroupSelectWrapper.bind(this),
              onClassificationGroupCheck: this.props.onClassificationGroupCheck,
              onExpandTree: this.props.onExpandTree,
              onUpdate: this.handleOnUpdateSearchResult,
              searchResultAttributes: this.state.searchResultAttributes,
              totalCount: this.state.classificationGroupsTotalCount
            }),
            _react2.default.createElement(_ClassificationGroupPreview2.default, {
              classificationGroup: this.state.previewClassificationGroup
            })
          )
        )
      );
    }
  }]);

  return ClassificationGroupSearchContainer;
}(_react2.default.Component), _class.propTypes = {
  selectedClassification: _react2.default.PropTypes.object,
  onlyLeafCouldBeSelected: _react2.default.PropTypes.bool.isRequired,
  multiple: _react2.default.PropTypes.bool.isRequired,
  classificationGroupsLoader: _react2.default.PropTypes.func.isRequired,
  onClassificationGroupSelect: _react2.default.PropTypes.func.isRequired,
  onClassificationGroupCheck: _react2.default.PropTypes.func.isRequired,
  onExpandTree: _react2.default.PropTypes.func.isRequired,

  show: _react2.default.PropTypes.bool.isRequired
}, _class.contextTypes = {
  i18n: _react2.default.PropTypes.object.isRequired
}, _temp2);
exports.default = ClassificationGroupSearchContainer;