'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _SortableColumn = require('../../SortableColumn');

var _SortableColumn2 = _interopRequireDefault(_SortableColumn);

var _PaginationPanel = require('../../PaginationPanel');

var _PaginationPanel2 = _interopRequireDefault(_PaginationPanel);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ClassificationGroupSearchResult = (_temp2 = _class = function (_React$Component) {
  _inherits(ClassificationGroupSearchResult, _React$Component);

  function ClassificationGroupSearchResult() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, ClassificationGroupSearchResult);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ClassificationGroupSearchResult.__proto__ || Object.getPrototypeOf(ClassificationGroupSearchResult)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      highlightedTableRow: -1,
      isAllClassificationGroupsChecked: false,
      classificationGroupRows: [],
      checkedClassificationGroupRows: []
    }, _this.buildClassificationGroupRows = function (classificationGroups) {
      return classificationGroups.map(function (classificationGroup) {
        var classificationGroupRow = {
          classificationGroup: classificationGroup,
          id: classificationGroup.id,
          checked: false
        };
        if (_lodash2.default.find(_this.state.checkedClassificationGroupRows, { id: classificationGroup.id })) {
          classificationGroupRow.checked = true;
        }
        return classificationGroupRow;
      });
    }, _this.updateClassificationGroupRows = function (appendingRows, classificationGroupRows) {
      var updatedClassificationGroupRows = classificationGroupRows.map(function (clsGrpRow) {
        var appendingRow = _lodash2.default.find(appendingRows, { id: clsGrpRow.id });
        return appendingRow ? appendingRow : clsGrpRow;
      });
      appendingRows.forEach(function (appendingRow) {
        if (!_lodash2.default.find(updatedClassificationGroupRows, { id: appendingRow.id })) {
          updatedClassificationGroupRows.push(appendingRow);
        }
      });
      return updatedClassificationGroupRows;
    }, _this.removeClassificationGroupRows = function (removingRows, classificationGroupRows) {
      return _lodash2.default.remove(classificationGroupRows, function (clsGrpRow) {
        return !_lodash2.default.find(removingRows, { id: clsGrpRow.id });
      });
    }, _this.handleOnColumnSortClick = function (sort, order) {
      var state = {
        sort: sort,
        order: order,
        offset: _this.props.searchResultAttributes.offset
      };
      _this.props.onUpdate(state);
    }, _this.handlePagination = function (offset) {
      var state = _extends({}, _this.props.searchResultAttributes, {
        offset: offset
      });
      _this.props.onUpdate(state);
    }, _this.isClassificationGroupCouldBeSelected = function (classificationGroup) {
      return !(_this.props.onlyLeafCouldBeSelected && classificationGroup.childCount > 0);
    }, _this.handleShowClassificationGroupInTree = function (classificationGroup) {
      var classificationGroupIDsForExpanding = [];
      classificationGroupIDsForExpanding.push(classificationGroup.id);
      var parentClassificationGroup = classificationGroup._data.parent;
      while (parentClassificationGroup) {
        classificationGroupIDsForExpanding.push(parentClassificationGroup.classificationGroupId);
        parentClassificationGroup = parentClassificationGroup.parent;
      }
      classificationGroupIDsForExpanding.reverse();
      _this.props.onExpandTree(classificationGroupIDsForExpanding);
    }, _this.handleClassificationGroupCheck = function (clsGrpRow) {
      var classificationGroupRow = _extends({}, clsGrpRow, {
        checked: !clsGrpRow.checked
      });
      var checkedClassificationGroupRows = [];
      var classificationGroupRows = _this.updateClassificationGroupRows([classificationGroupRow], _this.state.classificationGroupRows);
      if (classificationGroupRow.checked) {
        checkedClassificationGroupRows = _this.updateClassificationGroupRows([classificationGroupRow], _this.state.checkedClassificationGroupRows);
      } else {
        checkedClassificationGroupRows = _this.removeClassificationGroupRows([classificationGroupRow], _this.state.checkedClassificationGroupRows);
      }
      _this.setState({
        classificationGroupRows: classificationGroupRows,
        checkedClassificationGroupRows: checkedClassificationGroupRows,
        isAllClassificationGroupsChecked: false
      });
      var classificationGroups = checkedClassificationGroupRows.map(function (classificationGroupRow) {
        return classificationGroupRow.classificationGroup;
      });
      _this.props.onClassificationGroupCheck(classificationGroups);
    }, _this.handleCheckAllClassificationGroups = function () {
      var classificationGroupRows = _this.state.classificationGroupRows.map(function (classificationGroupRow) {
        return _extends({}, classificationGroupRow, {
          checked: !_this.state.isAllClassificationGroupsChecked
        });
      });
      var checkedClassificationGroupRows = [];
      if (_this.state.isAllClassificationGroupsChecked) {
        checkedClassificationGroupRows = _this.removeClassificationGroupRows(classificationGroupRows, _this.state.checkedClassificationGroupRows);
      } else {
        checkedClassificationGroupRows = _this.updateClassificationGroupRows(classificationGroupRows, _this.state.checkedClassificationGroupRows);
      }
      _this.setState({
        classificationGroupRows: classificationGroupRows,
        checkedClassificationGroupRows: checkedClassificationGroupRows,
        isAllClassificationGroupsChecked: !_this.state.isAllClassificationGroupsChecked
      });
      var classificationGroups = checkedClassificationGroupRows.map(function (classificationGroupRow) {
        return classificationGroupRow.classificationGroup;
      });
      _this.props.onClassificationGroupCheck(classificationGroups);
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(ClassificationGroupSearchResult, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.context.i18n.register('ClassificationGroupSearchResult', _i18n2.default);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var classificationGroupRows = this.buildClassificationGroupRows(this.props.classificationGroups);
      _bluebird2.default.resolve().then(function () {
        _this2.setState({ classificationGroupRows: classificationGroupRows });
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (!_lodash2.default.isEqual(this.props.classificationGroups, nextProps.classificationGroups)) {
        var classificationGroupRows = this.buildClassificationGroupRows(nextProps.classificationGroups);
        this.setState({
          highlightedTableRow: -1,
          classificationGroupRows: classificationGroupRows,
          isAllClassificationGroupsChecked: false
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(
        'div',
        null,
        function () {
          if (_this3.state.classificationGroupRows && _this3.state.classificationGroupRows.length) {
            var _ret2 = function () {
              var rows = [];
              _this3.state.classificationGroupRows.forEach(function (classificationGroupRow, index) {
                rows.push(_react2.default.createElement(
                  'tr',
                  { key: index, className: _this3.state.highlightedTableRow === index ? "selected-table-row" : "" },
                  function () {
                    if (_this3.props.multiple) {
                      if (_this3.isClassificationGroupCouldBeSelected(classificationGroupRow.classificationGroup)) {
                        return _react2.default.createElement(
                          'td',
                          null,
                          _react2.default.createElement('input', { type: 'checkbox',
                            onChange: function onChange() {
                              _this3.handleClassificationGroupCheck(classificationGroupRow);
                            },
                            checked: classificationGroupRow.checked
                          })
                        );
                      } else {
                        return _react2.default.createElement(
                          'td',
                          null,
                          '\xA0'
                        );
                      }
                    } else {
                      return null;
                    }
                  }(),
                  _react2.default.createElement(
                    'td',
                    null,
                    _react2.default.createElement(
                      'a',
                      { onClick: function onClick() {
                          _this3.setState({ highlightedTableRow: index });
                          _this3.props.onClassificationGroupSelect(classificationGroupRow.classificationGroup);
                        },
                        className: 'classification-group-search-result__pointer'
                      },
                      classificationGroupRow.id
                    )
                  ),
                  _react2.default.createElement(
                    'td',
                    null,
                    classificationGroupRow.classificationGroup.label
                  ),
                  _react2.default.createElement(
                    'td',
                    null,
                    _react2.default.createElement(
                      'a',
                      { onClick: function onClick() {
                          _this3.handleShowClassificationGroupInTree(classificationGroupRow.classificationGroup);
                        }
                      },
                      _react2.default.createElement('span', { className: 'glyphicon glyphicon-share-alt classification-group-search-result__pointer' })
                    )
                  )
                ));
              });
              return {
                v: _react2.default.createElement(
                  'div',
                  null,
                  _react2.default.createElement(
                    'table',
                    { className: 'table' },
                    _react2.default.createElement(
                      'thead',
                      null,
                      _react2.default.createElement(
                        'tr',
                        null,
                        function () {
                          if (_this3.props.multiple) {
                            return _react2.default.createElement(
                              'th',
                              null,
                              _react2.default.createElement('input', { type: 'checkbox',
                                onChange: _this3.handleCheckAllClassificationGroups,
                                checked: _this3.state.isAllClassificationGroupsChecked
                              })
                            );
                          } else {
                            return null;
                          }
                        }(),
                        _react2.default.createElement(
                          'th',
                          null,
                          _react2.default.createElement(_SortableColumn2.default, {
                            title: _this3.context.i18n.getMessage('ClassificationGroupSearchContainer.column.classificationGroupId'),
                            test: 'classificationGroupId',
                            sort: _this3.props.searchResultAttributes.sort,
                            order: _this3.props.searchResultAttributes.order,
                            onSort: _this3.handleOnColumnSortClick
                          })
                        ),
                        _react2.default.createElement(
                          'th',
                          null,
                          _this3.context.i18n.getMessage('ClassificationGroupSearchContainer.column.classificationDescription')
                        ),
                        _react2.default.createElement(
                          'th',
                          null,
                          '\xA0'
                        )
                      )
                    ),
                    _react2.default.createElement(
                      'tbody',
                      null,
                      rows
                    )
                  )
                )
              };
            }();

            if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === "object") return _ret2.v;
          } else {
            return null;
          }
        }(),
        _react2.default.createElement(
          'div',
          null,
          _react2.default.createElement(_PaginationPanel2.default, {
            count: this.props.totalCount,
            offset: this.props.searchResultAttributes.offset,
            onPaginate: this.handlePagination
          })
        )
      );
    }
  }]);

  return ClassificationGroupSearchResult;
}(_react2.default.Component), _class.propTypes = {
  classificationGroups: _react2.default.PropTypes.array,
  onlyLeafCouldBeSelected: _react2.default.PropTypes.bool.isRequired,
  multiple: _react2.default.PropTypes.bool.isRequired,
  onClassificationGroupSelect: _react2.default.PropTypes.func.isRequired,
  onClassificationGroupCheck: _react2.default.PropTypes.func.isRequired,
  onExpandTree: _react2.default.PropTypes.func.isRequired,
  onUpdate: _react2.default.PropTypes.func.isRequired,
  searchResultAttributes: _react2.default.PropTypes.object.isRequired,
  totalCount: _react2.default.PropTypes.number.isRequired
}, _class.contextTypes = {
  i18n: _react2.default.PropTypes.object.isRequired
}, _class.defaultProps = {
  classificationGroups: null
}, _temp2);
exports.default = ClassificationGroupSearchResult;