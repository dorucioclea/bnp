'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactSplitPane = require('react-split-pane');

var _reactSplitPane2 = _interopRequireDefault(_reactSplitPane);

var _ClassificationGroupPreview = require('../ClassificationGroupPreview/ClassificationGroupPreview.react');

var _ClassificationGroupPreview2 = _interopRequireDefault(_ClassificationGroupPreview);

var _ClassificationTree = require('../ClassificationTree.react');

var _ClassificationTree2 = _interopRequireDefault(_ClassificationTree);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ClassificationGroupTreeContainer = (_temp = _class = function (_React$Component) {
  _inherits(ClassificationGroupTreeContainer, _React$Component);

  function ClassificationGroupTreeContainer(props) {
    _classCallCheck(this, ClassificationGroupTreeContainer);

    var _this = _possibleConstructorReturn(this, (ClassificationGroupTreeContainer.__proto__ || Object.getPrototypeOf(ClassificationGroupTreeContainer)).call(this, props));

    _this.isClassificationGroupCouldBeSelected = function (classificationGroup) {
      return !(_this.props.onlyLeafCouldBeSelected && classificationGroup.childCount > 0);
    };

    _this.state = {
      previewClassificationGroup: null
    };
    return _this;
  }

  _createClass(ClassificationGroupTreeContainer, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.selectedClassification !== nextProps.selectedClassification || this.props.show !== nextProps.show) {
        this.setState({
          previewClassificationGroup: null
        });
      }
    }
  }, {
    key: 'onClassificationGroupSelectWrapper',
    value: function onClassificationGroupSelectWrapper(selectedClassificationGroup) {
      if (selectedClassificationGroup) {
        this.setState({ previewClassificationGroup: selectedClassificationGroup._data });
        if (this.isClassificationGroupCouldBeSelected(selectedClassificationGroup)) {
          this.props.onClassificationGroupSelect(selectedClassificationGroup);
        } else {
          this.props.onClassificationGroupSelect(null);
        }
      } else {
        this.setState({ previewClassificationGroup: null });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      if (!this.props.show) {
        return null;
      }
      return _react2.default.createElement(
        'div',
        { className: 'classification-browser row flexfix--col-height' },
        _react2.default.createElement(
          _reactSplitPane2.default,
          { split: 'vertical', minSize: 350, defaultSize: 500, className: 'classification-browser__split-pane' },
          _react2.default.createElement(_ClassificationTree2.default, {
            selectedClassification: this.props.selectedClassification,
            expandingTree: this.props.expandingTree,
            classificationGroupsLoader: this.props.classificationGroupsLoader,
            multiple: this.props.multiple,
            onlyLeafCouldBeSelected: this.props.onlyLeafCouldBeSelected,
            onClassificationGroupCheck: this.props.onClassificationGroupCheck,
            onClassificationGroupSelect: this.onClassificationGroupSelectWrapper.bind(this)
          }),
          _react2.default.createElement(_ClassificationGroupPreview2.default, {
            classificationGroup: this.state.previewClassificationGroup
          })
        )
      );
    }
  }]);

  return ClassificationGroupTreeContainer;
}(_react2.default.Component), _class.propTypes = {
  selectedClassification: _react2.default.PropTypes.object,
  expandingTree: _react2.default.PropTypes.array,
  multiple: _react2.default.PropTypes.bool.isRequired,
  onlyLeafCouldBeSelected: _react2.default.PropTypes.bool.isRequired,

  classificationGroupsLoader: _react2.default.PropTypes.func.isRequired,
  onClassificationGroupCheck: _react2.default.PropTypes.func.isRequired,
  onClassificationGroupSelect: _react2.default.PropTypes.func.isRequired,

  show: _react2.default.PropTypes.bool.isRequired
}, _temp);
exports.default = ClassificationGroupTreeContainer;