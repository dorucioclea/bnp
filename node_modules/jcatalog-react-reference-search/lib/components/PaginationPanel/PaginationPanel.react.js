'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Pagination = require('react-bootstrap/lib/Pagination');

var _Pagination2 = _interopRequireDefault(_Pagination);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// import translations from './i18n';
// import './PaginationPanel.less';

var NEXT_BUTTON = _react2.default.createElement('span', { className: 'glyphicon glyphicon-forward' });
var PREV_BUTTON = _react2.default.createElement('span', { className: 'glyphicon glyphicon-backward' });

/**
 * Pagination panel
 *
 * @author Dmitry Divin
 */
var PaginationPanel = (_temp = _class = function (_Component) {
  _inherits(PaginationPanel, _Component);

  function PaginationPanel() {
    _classCallCheck(this, PaginationPanel);

    return _possibleConstructorReturn(this, (PaginationPanel.__proto__ || Object.getPrototypeOf(PaginationPanel)).apply(this, arguments));
  }

  _createClass(PaginationPanel, [{
    key: 'onSelect',
    value: function onSelect(event, selectedEvent) {
      var max = this.props.max;
      var currentPage = selectedEvent.eventKey;

      this.props.onPaginate((currentPage - 1) * max);
    }
  }, {
    key: 'render',
    value: function render() {
      var count = this.props.count;

      if (count > 0) {
        var max = this.props.max;
        var offset = this.props.offset;

        var items = Math.ceil(count / max);
        return _react2.default.createElement(_Pagination2.default, {
          items: items,
          activePage: offset > 0 ? offset / max + 1 : 1,
          maxButtons: 3,
          onSelect: this.onSelect.bind(this),
          prev: PREV_BUTTON,
          next: NEXT_BUTTON,
          first: false,
          last: false,
          ellipsis: true,
          boundaryLinks: true,
          style: this.props.style
        });
      }
      return null;
    }
  }]);

  return PaginationPanel;
}(_react.Component), _class.propTypes = {
  /**
   * The number of records to display per page, default 10.
   */
  max: _react.PropTypes.number,

  /**
   * The count number of results to paginate
   */
  count: _react.PropTypes.number.isRequired,

  /**
   * The offset navigate
   */
  offset: _react.PropTypes.number.isRequired,

  /**
   * Pagination callback
   */
  onPaginate: _react.PropTypes.func.isRequired,

  /**
   * On select page
   */
  style: _react.PropTypes.object
}, _class.defaultProps = {
  max: 10,
  style: {}
}, _temp);
exports.default = PaginationPanel;