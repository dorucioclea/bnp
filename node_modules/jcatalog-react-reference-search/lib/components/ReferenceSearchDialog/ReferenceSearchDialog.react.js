'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Button = require('react-bootstrap/lib/Button');

var _Button2 = _interopRequireDefault(_Button);

var _Modal = require('react-bootstrap/lib/Modal');

var _Modal2 = _interopRequireDefault(_Modal);

var _PaginationPanel = require('../PaginationPanel');

var _PaginationPanel2 = _interopRequireDefault(_PaginationPanel);

var _SortableColumn = require('../SortableColumn');

var _SortableColumn2 = _interopRequireDefault(_SortableColumn);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _objectResolvePath = require('object-resolve-path');

var _objectResolvePath2 = _interopRequireDefault(_objectResolvePath);

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _ReferenceSearchDialogProps = require('../ReferenceSearchDialogProps');

var _ReferenceSearchDialogProps2 = _interopRequireDefault(_ReferenceSearchDialogProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Reference search dialog
 *
 * @author Dmitry Divin
 */
var ReferenceSearchDialog = (_temp = _class = function (_Component) {
  _inherits(ReferenceSearchDialog, _Component);

  function ReferenceSearchDialog(props, context) {
    _classCallCheck(this, ReferenceSearchDialog);

    var _this = _possibleConstructorReturn(this, (ReferenceSearchDialog.__proto__ || Object.getPrototypeOf(ReferenceSearchDialog)).call(this, props, context));

    _this.onChangeSearchParam = function (name, value) {
      var searchParams = _extends({}, _this.state.searchParams);
      if (value) {
        searchParams[name] = value;
        searchParams[name + '_operator'] = 'startsWith';
      } else {
        delete searchParams[name];
        delete searchParams[name + '_operator'];
      }

      _this.setState({ searchParams: searchParams });
    };

    _this.handleFormSubmit = function (event) {
      event.preventDefault();
      _this.doSearch.call(_this, _this.state.max, 0, _this.state.sort, _this.state.order);
    };

    _this.handleEnter = function () {
      _this.doSearch.call(_this, _this.state.max, _this.state.offset, _this.state.sort, _this.state.order);

      // set focus to first element
      var fieldName = _this.props.searchFields[0].name;
      var element = _this.refs[fieldName];
      if (element) {
        // fix for IE: set focus on next tick
        setTimeout(function () {
          return element.focus();
        }, 300);
      }
    };

    _this.handleColumnSort = function (sort, order) {
      _this.doSearch.call(_this, _this.state.max, _this.state.offset, sort, order, _this.onPaginateOnSortSearchCallback.bind(_this));
    };

    _this.onSelect = function (selectedItems) {
      if (selectedItems.length === 0) {
        alert('' + _this.context.i18n.getMessage('ReferenceSearchDialog.noItemsSelectedMessage'));

        return;
      }
      _this.props.onSelect(selectedItems);
      _this.props.onCloseDialog();
    };

    _this.selectAllItems = function (checked) {
      var newState = {
        selectedAll: checked,
        selectedItems: _lodash2.default.clone(_this.state.selectedItems)
      };

      if (checked) {
        var items = _this.state.items;
        var length = items.length;

        for (var i = 0; i < length; i++) {
          var item = items[i];
          if (_lodash2.default.isUndefined(_lodash2.default.find(_this.state.selectedItems, _defineProperty({}, _this.props.objectIdentifier, item[_this.props.objectIdentifier])))) {
            newState.selectedItems.push(item);
          }
        }
      } else {
        newState.selectedItems = _lodash2.default.reject(newState.selectedItems, function (item) {
          return !_lodash2.default.isUndefined(_lodash2.default.find(_this.state.items, _defineProperty({}, _this.props.objectIdentifier, item[_this.props.objectIdentifier])));
        });
      }
      _this.setState(newState);
    };

    _this.selectItem = function (item, checked) {
      var selectedItems = _lodash2.default.clone(_this.state.selectedItems);
      if (checked) {
        if (_lodash2.default.isUndefined(_lodash2.default.find(selectedItems, _defineProperty({}, _this.props.objectIdentifier, item[_this.props.objectIdentifier])))) {
          selectedItems.push(item);
        }
      } else {
        selectedItems = _lodash2.default.reject(selectedItems, function (selectedItem) {
          return selectedItem[_this.props.objectIdentifier] === item[_this.props.objectIdentifier];
        });
      }

      _this.setState({
        selectedAll: false,
        selectedItems: selectedItems
      });
    };

    _this.defaultDialogState = {
      selectedItems: [],
      selectedAll: false,
      searchParams: {},
      sort: '',
      order: '',
      offset: 0,
      max: 10,
      items: [],
      count: 0
    };

    _this.state = _extends({}, _this.defaultDialogState);
    return _this;
  }

  _createClass(ReferenceSearchDialog, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.context.i18n.register('ReferenceSearchDialog', _i18n2.default);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps, nextContext) {
      if (nextProps.openDialog !== this.props.openDialog) {
        this.setState(this.defaultDialogState);
      }
    }
  }, {
    key: 'doSearch',
    value: function doSearch(max, offset, sort, order) {
      var _this2 = this;

      var cb = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function (result) {
        _this2.setState(_extends({}, result));
      };

      var dataRowParams = {
        max: max,
        offset: offset
      };

      if (sort) {
        dataRowParams.sort = sort;
      }
      if (order) {
        dataRowParams.order = order;
      }
      this.props.referenceSearchAction(_extends({}, this.state.searchParams, dataRowParams), function (result) {
        cb(_extends({}, result, dataRowParams));
      });
    }
  }, {
    key: 'onPaginateOnSortSearchCallback',
    value: function onPaginateOnSortSearchCallback(result) {
      this.setState(_extends({}, result, {
        selectedAll: false,
        selectedItems: this.state.selectedItems
      }));
    }
  }, {
    key: 'onPaginate',
    value: function onPaginate(offset) {
      this.doSearch.call(this, this.state.max, offset, this.state.sort, this.state.order, this.onPaginateOnSortSearchCallback.bind(this));
    }
  }, {
    key: 'reset',
    value: function reset() {
      this.setState({ searchParams: {} });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          multiple = _props.multiple,
          modalSpecificProps = _props.modalSpecificProps;


      var style = {
        border: '0',
        paddingBottom: '0',
        verticalAlign: 'top'
      };
      var searchParams = this.state.searchParams;
      return _react2.default.createElement(
        _Modal2.default,
        _extends({}, this.props.modalSpecificProps, {
          show: this.props.openDialog,
          onHide: function onHide() {
            _this3.props.onCloseDialog();
            if (modalSpecificProps.onHide) {
              modalSpecificProps.onHide();
            }
          },
          onEnter: function onEnter() {
            _this3.handleEnter();
            if (modalSpecificProps.onEnter) {
              modalSpecificProps.onEnter();
            }
          },
          dialogClassName: 'reference-search-dialog',
          bsSize: 'lg'
        }),
        _react2.default.createElement(
          _Modal2.default.Header,
          { closeButton: true },
          _react2.default.createElement(
            _Modal2.default.Title,
            null,
            this.props.title
          )
        ),
        _react2.default.createElement(
          _Modal2.default.Body,
          null,
          _react2.default.createElement(
            'form',
            { className: 'form-horizontal', onSubmit: this.handleFormSubmit },
            _react2.default.createElement(
              'div',
              { className: 'reference-search__table-container' },
              _react2.default.createElement(
                'table',
                { className: 'table' },
                _react2.default.createElement(
                  'tbody',
                  null,
                  _react2.default.createElement(
                    'tr',
                    null,
                    this.props.searchFields.map(function (column, key) {
                      return _react2.default.createElement(
                        'td',
                        { key: key + '-label-search-header', style: style },
                        _react2.default.createElement(
                          'label',
                          { htmlFor: column.name },
                          column.label
                        )
                      );
                    })
                  ),
                  _react2.default.createElement(
                    'tr',
                    null,
                    this.props.searchFields.map(function (column, key) {
                      if (column.inputComponent) {
                        return _react2.default.createElement(
                          'td',
                          { key: key + '-label-search-header-input', style: style },
                          _react2.default.createElement(column.inputComponent, {
                            onChange: function onChange(event) {
                              return _this3.onChangeSearchParam(column.name, event.target.value);
                            },
                            value: searchParams[column.name],
                            id: column.name,
                            ref: column.name
                          })
                        );
                      }
                      return _react2.default.createElement(
                        'td',
                        { key: key + '-label-search-header-input', style: style },
                        _react2.default.createElement('input', { id: column.name,
                          ref: column.name, type: 'text',
                          className: 'form-control',
                          onChange: function onChange(event) {
                            return _this3.onChangeSearchParam(column.name, event.target.value);
                          },
                          value: searchParams[column.name]
                        })
                      );
                    })
                  )
                )
              )
            ),
            _react2.default.createElement(
              'div',
              { className: 'form-submit text-right' },
              _react2.default.createElement(
                _Button2.default,
                { bsStyle: 'link', onClick: this.reset.bind(this) },
                this.context.i18n.getMessage('ReferenceSearchDialog.resetLabel')
              ),
              _react2.default.createElement(
                _Button2.default,
                { bsStyle: 'primary', type: 'submit' },
                this.context.i18n.getMessage('ReferenceSearchDialog.searchLabel')
              )
            )
          ),
          this.state.items.length > 0 && multiple ? _react2.default.createElement(
            'p',
            null,
            _react2.default.createElement(
              _Button2.default,
              {
                bsStyle: 'primary',
                onClick: function onClick() {
                  return _this3.onSelect(_this3.state.selectedItems);
                }
              },
              this.context.i18n.getMessage('ReferenceSearchDialog.selectLabel')
            )
          ) : null,
          this.state.items.length > 0 ? _react2.default.createElement(
            'table',
            { className: 'table' },
            _react2.default.createElement(
              'thead',
              null,
              _react2.default.createElement(
                'tr',
                null,
                multiple ? _react2.default.createElement(
                  'th',
                  { className: 'header' },
                  _react2.default.createElement('input', { type: 'checkbox',
                    onChange: function onChange(e) {
                      return _this3.selectAllItems(e.target.checked);
                    },
                    checked: this.state.selectedAll
                  })
                ) : null,
                this.props.resultFields.map(function (row, key) {
                  if (!row.hidden) {
                    return _react2.default.createElement(
                      'th',
                      { key: key + '-label-search-result-header', className: 'header' },
                      row.sortable ? _react2.default.createElement(
                        'nobr',
                        null,
                        _react2.default.createElement(_SortableColumn2.default, { title: row.label,
                          test: row.name,
                          sort: _this3.state.sort,
                          order: _this3.state.order,
                          onSort: _this3.handleColumnSort
                        })
                      ) : row.label
                    );
                  }
                  return null;
                })
              )
            ),
            _react2.default.createElement(
              'tbody',
              null,
              this.state.items.map(function (item, itemKey) {
                var isItemSelected = !_lodash2.default.isUndefined(_lodash2.default.find(_this3.state.selectedItems, _defineProperty({}, _this3.props.objectIdentifier, item[_this3.props.objectIdentifier])));
                return _react2.default.createElement(
                  'tr',
                  { key: itemKey + '-search-result-item-row' },
                  multiple ? _react2.default.createElement(
                    'td',
                    null,
                    _react2.default.createElement('input', { type: 'checkbox',
                      onChange: function onChange(e) {
                        return _this3.selectItem(item, e.target.checked);
                      },
                      checked: isItemSelected
                    })
                  ) : null,
                  _this3.props.resultFields.map(function (row, headerKey) {
                    if (!row.hidden) {
                      return _react2.default.createElement(
                        'td',
                        { key: itemKey + '-' + headerKey + '-search-result-item-value' },
                        _react2.default.createElement(
                          'a',
                          { style: { cursor: 'pointer' }, onClick: function onClick() {
                              return _this3.onSelect([item]);
                            } },
                          (0, _objectResolvePath2.default)(item, row.name)
                        ),
                        row.rowValueLabel ? _react2.default.createElement(
                          'span',
                          null,
                          '\xA0',
                          _react2.default.createElement(
                            'span',
                            { className: row.rowValueLabel.className },
                            row.rowValueLabel.getValue(item)
                          )
                        ) : null
                      );
                    }
                    return null;
                  })
                );
              })
            )
          ) : null,
          this.state.count >= 1 ? _react2.default.createElement(
            'div',
            { className: 'container-fluid', style: { padding: 0 } },
            _react2.default.createElement(
              'div',
              { className: 'pull-right' },
              _react2.default.createElement(
                'div',
                { className: 'paginate', style: { display: 'flex', alignItems: 'center' } },
                _react2.default.createElement(
                  'div',
                  { className: 'pull-left' },
                  this.context.i18n.getMessage('ReferenceSearchDialog.itemsFound', { number: this.state.count })
                ),
                _react2.default.createElement(
                  'div',
                  { className: 'pull-left' },
                  _react2.default.createElement(_PaginationPanel2.default, {
                    count: this.state.count,
                    max: this.state.max,
                    offset: this.state.offset,
                    onPaginate: function onPaginate(offset) {
                      return _this3.onPaginate(offset);
                    },
                    style: { verticalAlign: 'middle' }
                  })
                )
              )
            )
          ) : _react2.default.createElement(
            'div',
            { className: 'bs-callout bs-callout-info' },
            this.context.i18n.getMessage('ReferenceSearchDialog.itemsFound', { number: 0 })
          )
        )
      );
    }
  }]);

  return ReferenceSearchDialog;
}(_react.Component), _class.propTypes = _extends({
  /**
   * Show search result popup
   */
  openDialog: _react.PropTypes.bool.isRequired,

  /**
   * On search request handler, where
   *
   * @arg0.searchParams - search params form input fields
   * @arg0.max - max result size
   * @arg0.offset - paging offset
   * @arg0.sort - sort column name
   * @arg0.order - order of sort
   */
  referenceSearchAction: _react.PropTypes.func.isRequired,
  /**
   * On close dialog
   */
  onCloseDialog: _react.PropTypes.func.isRequired,
  /**
   * On selected items handler, where:
   *
   * @arg0 - list of selected items
   */
  onSelect: _react.PropTypes.func.isRequired,
  /**
   * Multiple selection items,
   * otherwise single
   */
  multiple: _react.PropTypes.bool.isRequired,

  /**
   * Field that identifies the object (f.e. supplierId for suppliers)
   */
  objectIdentifier: _react.PropTypes.string.isRequired,

  /**
   * Modal specific properties
   */
  modalSpecificProps: _react.PropTypes.object

}, _ReferenceSearchDialogProps2.default), _class.contextTypes = {
  i18n: _react2.default.PropTypes.object.isRequired
}, _class.defaultProps = {
  modalSpecificProps: {}
}, _temp);
exports.default = ReferenceSearchDialog;