'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactSelect = require('react-select');

var _reactSelect2 = _interopRequireDefault(_reactSelect);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

require('react-select/dist/react-select.css');

require('./styles.less');

var _i18n = require('./i18n');

var _i18n2 = _interopRequireDefault(_i18n);

var _ReferenceInputBaseProps = require('../ReferenceInputBaseProps');

var _ReferenceInputBaseProps2 = _interopRequireDefault(_ReferenceInputBaseProps);

var _ReactSelectSpecificProps = require('../ReactSelectSpecificProps');

var _ReactSelectSpecificProps2 = _interopRequireDefault(_ReactSelectSpecificProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReferenceAutocomplete = (_temp = _class = function (_React$Component) {
  _inherits(ReferenceAutocomplete, _React$Component);

  function ReferenceAutocomplete(props, context) {
    _classCallCheck(this, ReferenceAutocomplete);

    var _this = _possibleConstructorReturn(this, (ReferenceAutocomplete.__proto__ || Object.getPrototypeOf(ReferenceAutocomplete)).call(this, props, context));

    _this.onChange = function (value) {
      if (_this.props.onChange) {
        _this.props.onChange(value ? value : _this.props.multiple ? [] : null);
      }
      _this.setState({ value: value });
    };

    if (!_this.validateValue(props.value, props.multiple || false)) {
      throw new Error('Invalid reference search value: ' + props.value + '. Only of \'object\' and \'array\' are supported.');
    }
    _this.state = {
      value: props.value
    };
    return _this;
  }

  _createClass(ReferenceAutocomplete, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.context.i18n.register('ReferenceAutocomplete', _i18n2.default);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps, nextContext) {
      if (!this.validateValue(nextProps.value, nextProps.multiple || false)) {
        throw new Error('Invalid reference search value: ' + nextProps.value + '.\n        Only of \'object\' and \'array\' are supported.');
      }

      if (!_lodash2.default.isEqual(nextProps.value, this.props.value)) {
        this.setState({ value: nextProps.value });
      }
    }
  }, {
    key: 'validateValue',
    value: function validateValue(value, multiple) {
      if (multiple && _lodash2.default.isArray(value)) {
        return true;
      } else if (!multiple && _lodash2.default.isObject(value) && !_lodash2.default.isArray(value)) {
        return true;
      } else {
        return _lodash2.default.isEmpty(value);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          autocompleteAction = _props.autocompleteAction,
          labelProperty = _props.labelProperty;

      var autoCompleteProps = _extends({
        name: this.props.name,
        onFocus: this.props.onFocus,
        onBlur: this.props.onBlur,
        onChange: this.onChange,
        cache: {},
        loadOptions: function loadOptions(input) {
          return autocompleteAction(input).then(function (result) {
            var _result$options = result.options,
                options = _result$options === undefined ? [] : _result$options,
                _result$sort = result.sort,
                sort = _result$sort === undefined ? true : _result$sort,
                _result$complete = result.complete,
                complete = _result$complete === undefined ? false : _result$complete;

            return {
              options: sort ? _lodash2.default.sortBy(options, function (option) {
                return ('' + option[labelProperty]).toLowerCase();
              }) : options,
              complete: complete
            };
          });
        },
        labelKey: this.props.labelProperty,
        valueKey: this.props.valueProperty,
        matchProp: 'label',
        value: this.state.value,
        disabled: this.props.disabled || this.props.readOnly,
        multi: this.props.multiple,
        ignoreCase: false,
        filterOption: function filterOption(option, filterString) {
          if (filterString) {
            var labelTest = String(option[labelProperty]);
            return labelTest.toLowerCase().indexOf(filterString.toLowerCase()) !== -1;
          }
          return true;
        },
        ignoreAccents: false,
        isLoading: this.state.isLoading,
        // labels:
        clearAllText: this.context.i18n.getMessage("ReferenceAutocomplete.clearAllText"),
        clearValueText: this.context.i18n.getMessage("ReferenceAutocomplete.clearValueText"),
        noResultsText: this.context.i18n.getMessage("ReferenceAutocomplete.noResultsText"),
        placeholder: this.context.i18n.getMessage("ReferenceAutocomplete.placeholder"),
        loadingPlaceholder: this.context.i18n.getMessage("ReferenceAutocomplete.loadingPlaceholder")
      }, this.props.reactSelectSpecificProps);
      return _react2.default.createElement(
        'div',
        { className: 'jc-reference-autocomplete' },
        _react2.default.createElement(_reactSelect2.default.Async, autoCompleteProps)
      );
    }
  }]);

  return ReferenceAutocomplete;
}(_react2.default.Component), _class.propTypes = _extends({}, _ReferenceInputBaseProps2.default, {
  // custom prop types
  autocompleteAction: _react2.default.PropTypes.func.isRequired,
  labelProperty: _react2.default.PropTypes.string.isRequired,
  valueProperty: _react2.default.PropTypes.string.isRequired,
  // react-select specific props
  reactSelectSpecificProps: _react2.default.PropTypes.shape(_ReactSelectSpecificProps2.default)
}), _class.contextTypes = {
  i18n: _react2.default.PropTypes.object.isRequired
}, _class.defaultProps = {
  disabled: false,
  multiple: false
}, _temp);
exports.default = ReferenceAutocomplete;