'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _ReferenceInputBaseProps = require('../ReferenceInputBaseProps');

var _ReferenceInputBaseProps2 = _interopRequireDefault(_ReferenceInputBaseProps);

var _ReferenceSearchDialogProps = require('../ReferenceSearchDialogProps');

var _ReferenceSearchDialogProps2 = _interopRequireDefault(_ReferenceSearchDialogProps);

var _ReadonlyInput = require('./ReadonlyInput.react');

var _ReadonlyInput2 = _interopRequireDefault(_ReadonlyInput);

var _Button = require('react-bootstrap/lib/Button');

var _Button2 = _interopRequireDefault(_Button);

var _ReferenceSearchDialog = require('../ReferenceSearchDialog');

var _ReferenceSearchDialog2 = _interopRequireDefault(_ReferenceSearchDialog);

require('./styles.less');

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReferenceSearchInput = (_temp = _class = function (_React$Component) {
  _inherits(ReferenceSearchInput, _React$Component);

  function ReferenceSearchInput(props) {
    _classCallCheck(this, ReferenceSearchInput);

    var _this = _possibleConstructorReturn(this, (ReferenceSearchInput.__proto__ || Object.getPrototypeOf(ReferenceSearchInput)).call(this, props));

    _this.handleCloseDialog = function () {
      _this.setState({ openDialog: false });
    };

    _this.handleValueChange = function (value) {
      if (_this.props.onChange) {
        _this.props.onChange(value ? value : _this.props.multiple ? [] : null);
      }
      _this.setState({ value: value });
    };

    _this.state = {
      value: _lodash2.default.isUndefined(props.value) ? null : props.value,
      openDialog: false
    };
    return _this;
  }

  _createClass(ReferenceSearchInput, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.value) {
        if (this.props.value !== nextProps.value) {
          this.setState({ value: nextProps.value });
        }
      } else {
        this.setState({ value: this.props.multiple ? [] : null });
      }
    }
  }, {
    key: 'handleReferenceSelect',
    value: function handleReferenceSelect(selectedItems) {
      var _this2 = this;

      if (this.props.multiple) {
        if (_lodash2.default.isNull(this.state.value)) {
          this.handleValueChange(selectedItems);
        } else {
          (function () {
            var valueProperty = _this2.props.valueProperty;
            var result = _lodash2.default.clone(_this2.state.value);
            // only unique by valueProperty values
            _lodash2.default.forEach(selectedItems, function (selectedItem) {
              if (_lodash2.default.findIndex(result, function (it) {
                return it[valueProperty] === selectedItem[valueProperty];
              }) === -1) {
                result.push(selectedItem);
              }
            });
            _this2.handleValueChange(result);
          })();
        }
      } else {
        this.handleValueChange(selectedItems[0]);
      }
    }
  }, {
    key: 'openReferenceSearch',
    value: function openReferenceSearch() {
      this.setState({ openDialog: true });
    }
  }, {
    key: 'resetValue',
    value: function resetValue() {
      if (this.props.multiple) {
        this.setState({ value: [] });
      } else {
        this.setState({ value: null });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var childProps = _lodash2.default.pick(this.props, ['id', 'name', 'onFocus', 'onBlur', 'multiple', 'labelProperty', 'valueProperty', 'readOnly']);

      childProps.value = this.state.value;
      childProps.onChange = this.handleValueChange;

      var children = void 0;
      if (this.props.children) {
        childProps.readOnly = this.props.readOnly;
        childProps.disabled = this.props.disabled;

        var element = _react2.default.Children.only(this.props.children);
        children = _react2.default.cloneElement(element, childProps);
      } else {
        children = _react2.default.createElement(_ReadonlyInput2.default, childProps);
      }

      return _react2.default.createElement(
        'div',
        { className: 'input-group jc-reference-search-input' },
        _react2.default.createElement(_ReferenceSearchDialog2.default, {
          openDialog: this.state.openDialog,
          referenceSearchAction: this.props.referenceSearchAction,
          onCloseDialog: this.handleCloseDialog,
          onSelect: function onSelect(selectedItems) {
            return _this3.handleReferenceSelect(selectedItems);
          },
          title: this.props.title,
          multiple: this.props.multiple,
          searchFields: this.props.searchFields,
          resultFields: this.props.resultFields,
          objectIdentifier: this.props.valueProperty,
          modalSpecificProps: this.props.modalSpecificProps
        }),
        children,
        _react2.default.createElement(
          'span',
          { className: 'input-group-btn' },
          _react2.default.createElement(
            _Button2.default,
            { onClick: function onClick() {
                return _this3.openReferenceSearch();
              }, disabled: this.props.disabled || this.props.readOnly },
            _react2.default.createElement('span', { className: 'glyphicon glyphicon-search' })
          ),
          !this.props.children ? _react2.default.createElement(
            _Button2.default,
            { onClick: function onClick() {
                return _this3.resetValue();
              }, disabled: this.props.disabled || this.props.readOnly },
            _react2.default.createElement('span', { className: 'glyphicon glyphicon-remove' })
          ) : null
        )
      );
    }
  }]);

  return ReferenceSearchInput;
}(_react2.default.Component), _class.propTypes = _extends({}, _ReferenceInputBaseProps2.default, _ReferenceSearchDialogProps2.default, {
  referenceSearchAction: _react2.default.PropTypes.func.isRequired,
  labelProperty: _react2.default.PropTypes.string.isRequired,
  valueProperty: _react2.default.PropTypes.string.isRequired,
  modalSpecificProps: _react2.default.PropTypes.object
}), _class.defaultProps = {
  disabled: false,
  readOnly: false,
  multiple: false,
  modalSpecificProps: {}
}, _temp);
exports.default = ReferenceSearchInput;