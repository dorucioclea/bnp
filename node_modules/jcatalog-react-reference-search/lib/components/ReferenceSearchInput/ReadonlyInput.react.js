'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _ReferenceInputBaseProps = require('../ReferenceInputBaseProps');

var _ReferenceInputBaseProps2 = _interopRequireDefault(_ReferenceInputBaseProps);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ReadonlyInput = (_temp = _class = function (_React$Component) {
  _inherits(ReadonlyInput, _React$Component);

  function ReadonlyInput(props) {
    _classCallCheck(this, ReadonlyInput);

    var _this = _possibleConstructorReturn(this, (ReadonlyInput.__proto__ || Object.getPrototypeOf(ReadonlyInput)).call(this, props));

    if (!_this.validateValue(props.value, props.multiple || false)) {
      throw new Error('Invalid reference search value: ' + props.value + '. Only of \'object\' and \'array\' are supported.');
    }
    _this.state = {
      value: _lodash2.default.isUndefined(props.value) ? null : props.value
    };
    return _this;
  }

  _createClass(ReadonlyInput, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps, nextContext) {
      if (!this.validateValue(nextProps.value, nextProps.multiple || false)) {
        throw new Error('Invalid reference search value: ' + nextProps.value + '.\n        Only of \'object\' and \'array\' are supported.');
      }

      if (!_.isEqual(nextProps.value, this.state.value)) {
        this.setState({ value: nextProps.value });
      }
    }
  }, {
    key: 'validateValue',
    value: function validateValue(value, multiple) {
      if (multiple && _lodash2.default.isArray(value)) {
        return true;
      } else if (!multiple && _lodash2.default.isObject(value) && !_lodash2.default.isArray(value)) {
        return true;
      } else {
        return _lodash2.default.isEmpty(value);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var labelProperty = this.props.labelProperty;
      var valueProperty = this.props.valueProperty;
      var label = function label(value) {
        if (!value) {
          return '';
        }
        return value[labelProperty] ? value[labelProperty] : value[valueProperty];
      };

      var value = '';
      if (this.state.value) {
        if (_lodash2.default.isArray(this.state.value)) {
          value = this.state.value.reduce(function (previousValue, currentValue) {
            var val = label(currentValue);
            if (!previousValue) {
              return val;
            }
            return previousValue + '; ' + val;
          }, null);
        } else {
          value = label(this.state.value);
        }
      }

      return _react2.default.createElement('input', { readOnly: true,
        className: 'form-control',
        id: this.props.id,
        name: this.props.name,
        onFocus: this.props.onFocus,
        onBlur: this.props.onBlur,
        value: value
      });
    }
  }]);

  return ReadonlyInput;
}(_react2.default.Component), _class.propTypes = _extends({}, _ReferenceInputBaseProps2.default, {
  labelProperty: _react2.default.PropTypes.string.isRequired,
  valueProperty: _react2.default.PropTypes.string.isRequired
}), _temp);
exports.default = ReadonlyInput;