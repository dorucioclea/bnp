'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = function (services) {
  return function (props, propName, componentName) {
    var fn = props[propName];
    if (fn) {
      if (_lodash2.default.isFunction(fn)) {
        if (_lodash2.default.isArray(services)) {
          for (var i = 0; i < services.length; i++) {
            checkServiceName(propName, fn, services[i]);
          }
        } else {
          checkServiceName(propName, fn, services);
        }
      } else {
        var preciseType = getPreciseType(fn);
        throw new Error('Invalid props \'' + propName + '\' of type \'' + preciseType + '\'\n          supplied to \'' + componentName + '\', expected \'function\'.');
      }
    } else {
      throw new Error('Required props `' + propName + '` was not specified in ' + ('`' + componentName + '`.'));
    }
  };
};

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

function checkServiceName(propName, fn, serviceName) {
  var result = fn(serviceName);

  if (!(_lodash2.default.isObject(result) && _lodash2.default.isString(result.url))) {
    throw new Error('Invalid props \'' + propName + '\' can\'t configure serviceRegistry for service name \'' + serviceName + '\'');
  }
}