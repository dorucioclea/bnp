'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ASC_ORDER = 'asc';
var DESC_ORDER = 'desc';

/**
 * Sortable columns
 *
 * @author Dmitry Divin
 */
var SortableColumn = (_temp = _class = function (_Component) {
  _inherits(SortableColumn, _Component);

  function SortableColumn() {
    _classCallCheck(this, SortableColumn);

    return _possibleConstructorReturn(this, (SortableColumn.__proto__ || Object.getPrototypeOf(SortableColumn)).apply(this, arguments));
  }

  _createClass(SortableColumn, [{
    key: 'onSort',
    value: function onSort(event) {
      event.preventDefault();

      var order = this.props.order;

      if (order) {
        order = order === ASC_ORDER ? DESC_ORDER : this.props.defaultOrder;
      } else {
        order = this.props.defaultOrder;
      }

      this.props.onSort(this.props.test, order);
    }
  }, {
    key: 'render',
    value: function render() {
      var sort = this.props.sort;
      var test = this.props.test;
      var title = this.props.title;

      var icon = null;
      if (sort === test) {
        var order = this.props.order || this.props.defaultOrder;
        if (order === ASC_ORDER) {
          icon = _react2.default.createElement('span', { className: 'glyphicon glyphicon-arrow-up sortable-column__icon' });
        } else {
          icon = _react2.default.createElement('span', { className: 'glyphicon glyphicon-arrow-down sortable-column__icon' });
        }
      }

      return _react2.default.createElement(
        'a',
        { onClick: this.onSort.bind(this), style: { cursor: 'pointer' } },
        title,
        _react2.default.createElement(
          'small',
          null,
          icon
        )
      );
    }
  }]);

  return SortableColumn;
}(_react.Component), _class.propTypes = {
  title: _react.PropTypes.string.isRequired,
  /**
   * Property name
   */
  test: _react.PropTypes.string.isRequired,
  order: _react.PropTypes.string,
  defaultOrder: _react.PropTypes.string,
  sort: _react.PropTypes.string,
  onSort: _react.PropTypes.func.isRequired
}, _class.defaultProps = {
  defaultOrder: ASC_ORDER
}, _temp);
exports.default = SortableColumn;